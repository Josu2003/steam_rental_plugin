import os
import logging
import json
import time
import threading
import random
import string
import requests
from uuid import uuid4
from datetime import datetime, timedelta
import re
import hashlib
import base64
import hmac
import telebot.types 

from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–≥–∏–Ω–µ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è)
NAME = "Auto_fxck"
VERSION = "6.6.7"
DESCRIPTION = "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞—Ä–µ–Ω–¥—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Steam"
CREDITS = "@@xx00xxdanu"
UUID = "a09b8c7d-6e5f-4a3b-8c1d-098765432109"  # Valid UUID4 format
SETTINGS_PAGE = False 

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger("FPC.Steam_Rental")
LOGGER_PREFIX = "[Steam_Rental]"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DATA_DIR = os.path.join("data", "steam_rental")
ACCOUNTS_FILE = os.path.join(DATA_DIR, "accounts.json")
RENTALS_FILE = os.path.join(DATA_DIR, "rentals.json")
LOT_BINDINGS_FILE = os.path.join(DATA_DIR, "lot_bindings.json")
CONFIG_FILE = os.path.join(DATA_DIR, "config.json")
TEMPLATES_FILE = os.path.join(DATA_DIR, "message_templates.json")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
ADD_ACCOUNT_STATES = {}  # chat_id -> {state: "login|password|type|api_key", data: {}}
EDIT_TEMPLATE_STATES = {}  # chat_id -> {template_name: "...", editing: True/False}
ADMIN_ID_STATES = {}  # chat_id -> {setting: True/False}
ADD_BINDING_STATES = {}  # chat_id -> {state: "name|type|duration", data: {}}

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
os.makedirs(DATA_DIR, exist_ok=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
RUNNING = False
AUTO_START = True  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
CARDINAL = None
lot_bindings = {}  # lot_id -> {"account_type": "...", "duration_hours": N}
message_templates = {}  # template_name -> template_text
admin_id = None  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
binding_hash_map = {}  # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ö–µ—à–µ–π —Å –∏–º–µ–Ω–∞–º–∏ –ª–æ—Ç–æ–≤

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
DEFAULT_TEMPLATES = {
    "rental_start": "üéÆ <b>–ê—Ä–µ–Ω–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ Steam</b>\n\n"
                   "üë§ –õ–æ–≥–∏–Ω: <code>{login}</code>\n"
                   "üîë –ü–∞—Ä–æ–ª—å: <code>{password}</code>\n"
                   "üî∞ –¢–∏–ø: {account_type}\n\n"
                   "‚è± –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã: {duration_hours} —á.\n"
                   "‚åõ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_time}\n\n"
                   "‚ùó <b>–í–∞–∂–Ω–æ:</b>\n"
                   "‚Ä¢ –ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n"
                   "‚Ä¢ –ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω\n"
                   "‚Ä¢ –ù–µ –º–µ–Ω—è–π—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞\n"
                   "‚Ä¢ –ù–µ –≤–∫–ª—é—á–∞–π—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é",
    
    "rental_end": "‚è∞ <b>–ê—Ä–µ–Ω–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
                 "–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã –∞–∫–∫–∞—É–Ω—Ç–∞ Steam –∏—Å—Ç–µ–∫. –î–æ—Å—Ç—É–ø –ø—Ä–µ–∫—Ä–∞—â–µ–Ω, –ø–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω.\n"
                 "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!",
    
    "rental_force_end": "‚ö†Ô∏è <b>–ê—Ä–µ–Ω–¥–∞ –¥–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
                       "–ê—Ä–µ–Ω–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ Steam –±—ã–ª–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                       "–î–æ—Å—Ç—É–ø –ø—Ä–µ–∫—Ä–∞—â–µ–Ω, –ø–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω.",
    
    "admin_rental_start": "‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç –≤—ã–¥–∞–Ω</b>\n\n"
                         "üîπ –ó–∞–∫–∞–∑: <code>#{order_id}</code>\n"
                         "üîπ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <b>{username}</b>\n"
                         "üîπ –ê–∫–∫–∞—É–Ω—Ç: <code>{login}</code>\n"
                         "üîπ –ü–∞—Ä–æ–ª—å: <code>{password}</code>\n"
                         "üîπ –¢–∏–ø: <code>{account_type}</code>\n"
                         "üîπ –°—Ä–æ–∫: <code>{duration_hours} —á.</code>\n"
                         "üîπ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_time}",
    
    "admin_rental_end": "‚è∞ <b>–ê—Ä–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
                       "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
                       "üéÆ –ê–∫–∫–∞—É–Ω—Ç: {login}\n"
                       "üî∞ –¢–∏–ø: {account_type}\n"
                       "‚úÖ –ê–∫–∫–∞—É–Ω—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –ø—É–ª –¥–æ—Å—Ç—É–ø–Ω—ã—Ö\n"
                       "üîê –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: <code>{new_password}</code>"
}

# –ö–ª–∞—Å—Å—ã –¥–∞–Ω–Ω—ã—Ö
class Account:
    def __init__(self, login, password, status="available", account_type="standard", api_key=None):
        self.login = login
        self.password = password
        self.status = status  # available, rented, disabled
        self.type = account_type
        self.rental_id = None
        self.api_key = api_key  # API –∫–ª—é—á –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Steam —Å–µ—Å—Å–∏—è–º–∏
        self.original_password = password  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
        
    def to_dict(self):
        return {
            "login": self.login,
            "password": self.password,
            "status": self.status,
            "type": self.type,
            "rental_id": self.rental_id,
            "api_key": self.api_key,
            "original_password": self.original_password
        }
        
    @staticmethod
    def from_dict(data):
        account = Account(
            data["login"],
            data["password"],
            data.get("status", "available"),
            data.get("type", "standard"),
            data.get("api_key")
        )
        account.rental_id = data.get("rental_id")
        account.original_password = data.get("original_password", data["password"])
        return account

    def change_password(self, new_password=None):
        """–ò–∑–º–µ–Ω—è–µ—Ç –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"""
        if new_password is None:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å
            new_password = generate_strong_password()
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ API Steam –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
        old_password = self.password
        self.password = new_password
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ API Steam, –µ—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á
        if self.api_key:
            success = self.change_password_via_api(old_password, new_password)
            if success:
                logger.info(f"{LOGGER_PREFIX} –ü–∞—Ä–æ–ª—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {self.login} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω —á–µ—Ä–µ–∑ API")
            else:
                logger.warning(f"{LOGGER_PREFIX} –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ API –¥–ª—è {self.login}")
        
        return new_password

    def change_password_via_api(self, old_password, new_password):
        """–ò–∑–º–µ–Ω—è–µ—Ç –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ Steam API"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API URL –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
            api_url = "https://api.steampowered.com/IAuthenticationService/UpdatePassword/v1/"
            
            # –ü–æ–ª—É—á–∞–µ–º rsatimestamp –∏ publickey_mod –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
            get_key_url = "https://steamcommunity.com/login/getrsakey/"
            get_key_data = {
                "username": self.login,
                "donotcache": int(time.time() * 1000)
            }
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
                "Accept": "application/json, text/plain, */*",
                "Origin": "https://steamcommunity.com",
                "Referer": "https://steamcommunity.com/login/home/"
            }
            
            # –ü–æ–ª—É—á–∞–µ–º RSA –∫–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
            key_response = requests.post(get_key_url, data=get_key_data, headers=headers)
            if not key_response.ok:
                logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è RSA –∫–ª—é—á–∞: {key_response.status_code}")
                return False, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è RSA –∫–ª—é—á–∞", None
            
            key_data = key_response.json()
            if not key_data.get("success"):
                logger.error(f"{LOGGER_PREFIX} –°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª RSA –∫–ª—é—á: {key_data}")
                return False, "–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª RSA –∫–ª—é—á", None
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            timestamp = key_data.get("timestamp")
            modulus = int(key_data.get("publickey_mod"), 16)
            exponent = int(key_data.get("publickey_exp"), 16)
            
            # –®–∏—Ñ—Ä—É–µ–º –ø–∞—Ä–æ–ª—å —Å –ø–æ–º–æ—â—å—é RSA
            from Crypto.PublicKey import RSA
            from Crypto.Cipher import PKCS1_v1_5
            
            key = RSA.construct((modulus, exponent))
            cipher = PKCS1_v1_5.new(key)
            encrypted_password = base64.b64encode(cipher.encrypt(old_password.encode('utf-8')))
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            login_data = {
                "username": self.login,
                "password": encrypted_password.decode('utf-8'),
                "rsatimestamp": timestamp,
                "remember_login": True,
                "captchagid": -1,
                "captcha_text": ""
            }
            
            # URL –¥–ª—è –≤—Ö–æ–¥–∞
            login_url = "https://steamcommunity.com/login/dologin/"
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
            session = requests.Session()
            login_response = session.post(login_url, data=login_data, headers=headers)
            login_result = login_response.json()
            
            if not login_result.get("success"):
                error_message = login_result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Steam: {error_message}")
                return False, f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {error_message}", None
            
            # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –º–µ–Ω—è–µ–º –ø–∞—Ä–æ–ª—å
            steamid = login_result.get("transfer_parameters", {}).get("steamid")
            if not steamid:
                logger.error(f"{LOGGER_PREFIX} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å steamid –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å steamid", None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∏–∑ cookie
            sessionid = None
            for cookie in session.cookies:
                if cookie.name == "sessionid":
                    sessionid = cookie.value
                    break
            
            if not sessionid:
                logger.error(f"{LOGGER_PREFIX} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å sessionid –∏–∑ cookies")
                return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å sessionid", None
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
            change_password_data = {
                "sessionid": sessionid,
                "steamid": steamid,
                "password": old_password,
                "new_password": new_password,
                "confirm_new_password": new_password
            }
            
            # URL –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
            change_password_url = "https://steamcommunity.com/profiles/" + steamid + "/edit/changepassword"
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
            change_response = session.post(change_password_url, data=change_password_data, headers=headers)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
            if change_response.ok and "successfully updated" in change_response.text.lower():
                logger.info(f"{LOGGER_PREFIX} –ü–∞—Ä–æ–ª—å –¥–ª—è {self.login} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")
                return True, "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω", new_password
            else:
                logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: {change_response.status_code}")
                return False, f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: {change_response.status_code}", None
        
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ API: {str(e)}")
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è: {str(e)}", None

    def end_session(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ"""
        self.status = "available"  # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–π
        
        if self.api_key:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ API
                success = self.end_session_via_api()
                if success:
                    logger.info(f"{LOGGER_PREFIX} –°–µ—Å—Å–∏–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {self.login} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —á–µ—Ä–µ–∑ API")
                else:
                    logger.warning(f"{LOGGER_PREFIX} –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ API –¥–ª—è {self.login}")
                return success
            except Exception as e:
                logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–π: {e}")
        
        return True  # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã

    def end_session_via_api(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ —á–µ—Ä–µ–∑ Steam API"""
        try:
            # –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ Steam API –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
            # https://partner.steamgames.com/doc/webapi/ISteamUser
            api_url = "https://api.steampowered.com/ISteamUser/RevokeAuthSessions/v1/"
            headers = {
                "Content-Type": "application/x-www-form-urlencoded",
                "Authorization": f"Bearer {self.api_key}"
            }
            data = {
                "steamid": self.login
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            response = requests.post(api_url, headers=headers, data=data, timeout=10)
            if response.status_code == 200:
                try:
                    result = response.json()
                    return result.get('success', False)
                except:
                    return response.status_code == 200
            return False
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–π: {e}")
            return False

    def reset_to_original_password(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é"""
        if self.original_password:
            old_password = self.password
            self.password = self.original_password
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ API Steam, –µ—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á
            if self.api_key:
                success = self.change_password_via_api(old_password, self.original_password)
                if success:
                    logger.info(f"{LOGGER_PREFIX} –ü–∞—Ä–æ–ª—å –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {self.login} —Å–±—Ä–æ—à–µ–Ω –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —á–µ—Ä–µ–∑ API")
                else:
                    logger.warning(f"{LOGGER_PREFIX} –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ API –¥–ª—è {self.login}")
            
            return True
        return False

class Rental:
    def __init__(self, account_login, user_id, username, duration_hours, order_id=None):
        self.id = str(uuid4())
        self.account_login = account_login
        self.user_id = user_id
        self.username = username
        self.start_time = time.time()
        self.duration_hours = duration_hours
        self.end_time = self.start_time + (duration_hours * 3600)
        self.order_id = order_id
        self.is_active = True
        
    def to_dict(self):
        return {
            "id": self.id,
            "account_login": self.account_login,
            "user_id": self.user_id,
            "username": self.username,
            "start_time": self.start_time,
            "duration_hours": self.duration_hours,
            "end_time": self.end_time,
            "order_id": self.order_id,
            "is_active": self.is_active
        }
        
    @staticmethod
    def from_dict(data):
        rental = Rental(
            data["account_login"],
            data["user_id"],
            data["username"],
            data["duration_hours"],
            data.get("order_id")
        )
        rental.id = data["id"]
        rental.start_time = data["start_time"]
        rental.end_time = data["end_time"]
        rental.is_active = data["is_active"]
        return rental
        
    def is_expired(self):
        return time.time() >= self.end_time
        
    def get_remaining_time(self):
        if not self.is_active:
            return timedelta(0)
        
        remaining_seconds = max(0, self.end_time - time.time())
        return timedelta(seconds=remaining_seconds)
    
    def extend_rental(self, additional_hours):
        """–ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –∞—Ä–µ–Ω–¥—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤"""
        self.duration_hours += additional_hours
        self.end_time += additional_hours * 3600
        return True
    
    def get_formatted_end_time(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã"""
        return datetime.fromtimestamp(self.end_time).strftime("%d.%m.%Y %H:%M")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def generate_strong_password(length=12):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å"""
    lowercase = string.ascii_lowercase
    uppercase = string.ascii_uppercase
    digits = string.digits
    special = "!@#$%^&*"
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤ –ø–∞—Ä–æ–ª–µ –±—É–¥–µ—Ç —Ö–æ—Ç—è –±—ã –ø–æ –æ–¥–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    password = [
        random.choice(lowercase),
        random.choice(uppercase),
        random.choice(digits),
        random.choice(special)
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    remaining_length = length - len(password)
    all_chars = lowercase + uppercase + digits + special
    password.extend(random.choice(all_chars) for _ in range(remaining_length))
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
    random.shuffle(password)
    
    return ''.join(password)

def format_message(template_name, **kwargs):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω—É —Å –∑–∞–º–µ–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
    if template_name not in message_templates:
        logger.warning(f"{LOGGER_PREFIX} –®–∞–±–ª–æ–Ω '{template_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π")
        template = DEFAULT_TEMPLATES.get(template_name, "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
    else:
        template = message_templates[template_name]
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω–µ
    try:
        formatted_message = template.format(**kwargs)
        return formatted_message
    except KeyError as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á {e}")
        return template
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {e}")
        return template

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
class RentalManager:
    def __init__(self):
        self.accounts = {}  # login -> Account
        self.rentals = {}   # id -> Rental
        self.load_data()
        
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        if os.path.exists(ACCOUNTS_FILE):
            try:
                with open(ACCOUNTS_FILE, "r", encoding="utf-8") as f:
                    accounts_data = json.load(f)
                    self.accounts = {
                        login: Account.from_dict(data) 
                        for login, data in accounts_data.items()
                    }
            except Exception as e:
                logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
                self.accounts = {}
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä–µ–Ω–¥
        if os.path.exists(RENTALS_FILE):
            try:
                with open(RENTALS_FILE, "r", encoding="utf-8") as f:
                    rentals_data = json.load(f)
                    self.rentals = {
                        data["id"]: Rental.from_dict(data)
                        for data in rentals_data
                    }
            except Exception as e:
                logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä–µ–Ω–¥: {e}")
                self.rentals = {}
    
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª—ã"""
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        try:
            accounts_data = {
                login: account.to_dict()
                for login, account in self.accounts.items()
            }
            with open(ACCOUNTS_FILE, "w", encoding="utf-8") as f:
                json.dump(accounts_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥
        try:
            rentals_data = [rental.to_dict() for rental in self.rentals.values()]
            with open(RENTALS_FILE, "w", encoding="utf-8") as f:
                json.dump(rentals_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Ä–µ–Ω–¥: {e}")
    
    def add_account(self, login, password, account_type="standard", api_key=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç"""
        if login in self.accounts:
            return False, "–ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        normalized_type = account_type.lower().replace('.', '').replace(' ', '')
        if normalized_type == "repo":
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è REPO –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            account_type = "repo"
        
        self.accounts[login] = Account(login, password, "available", account_type, api_key)
        self.save_data()
        return True, "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"
    
    def update_account(self, login, **kwargs):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        if login not in self.accounts:
            return False, "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        account = self.accounts[login]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
        if "password" in kwargs:
            account.password = kwargs["password"]
            account.original_password = kwargs.get("original_password", account.password)
        
        if "type" in kwargs:
            account.type = kwargs["type"]
        
        if "api_key" in kwargs:
            account.api_key = kwargs["api_key"]
        
        self.save_data()
        return True, "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"
    
    def remove_account(self, login):
        """–£–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç"""
        if login not in self.accounts:
            return False, "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        account = self.accounts[login]
        if account.status == "rented":
            return False, "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–µ–π—á–∞—Å –≤ –∞—Ä–µ–Ω–¥–µ"
        
        del self.accounts[login]
        self.save_data()
        return True, "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
    
    def get_available_account(self, account_type=None):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        if not account_type:
            # –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω, –≤–µ—Ä–Ω–µ–º –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
            for login, account in self.accounts.items():
                if account.status == "available":
                    logger.info(f"{LOGGER_PREFIX} –í—ã–±—Ä–∞–Ω –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç: {login} ({account.type})")
                    return account
            logger.warning(f"{LOGGER_PREFIX} –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ")
            return None
    
        logger.info(f"{LOGGER_PREFIX} –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ —Ç–∏–ø—É: {account_type}")
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–∏–ø–æ–≤
        normalized_type = account_type.lower().replace('.', '').replace(' ', '')
        logger.info(f"{LOGGER_PREFIX} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–ø: {normalized_type}")
        
        # –í—ã–≤–æ–¥ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        available_types = [(account.login, account.type, account.status) for account in self.accounts.values()]
        logger.info(f"{LOGGER_PREFIX} –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: {available_types}")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for login, account in self.accounts.items():
            if account.status == "available" and account.type.lower() == account_type.lower():
                logger.info(f"{LOGGER_PREFIX} –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {login} ({account.type})")
                return account
                
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∏—â–µ–º —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
        for login, account in self.accounts.items():
            if account.status == "available":
                normalized_account_type = account.type.lower().replace('.', '').replace(' ', '')
                if normalized_account_type == normalized_type:
                    logger.info(f"{LOGGER_PREFIX} –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {login} ({account.type})")
                    return account
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è R.E.P.O / REPO
        if normalized_type == "repo":
            for login, account in self.accounts.items():
                if account.status == "available":
                    acc_type = account.type.lower().replace('.', '').replace(' ', '')
                    if acc_type == "repo":
                        logger.info(f"{LOGGER_PREFIX} –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ REPO: {login} ({account.type})")
                        return account
        
        logger.warning(f"{LOGGER_PREFIX} –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Ç–∏–ø–∞ {account_type}")
        return None
    
    def rent_account(self, user_id, username, duration_hours, account_type=None, order_id=None, specific_account=None):
        """–ê—Ä–µ–Ω–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∞—Ä–µ–Ω–¥—ã
        if specific_account:
            if specific_account.login in self.accounts and self.accounts[specific_account.login].status == "available":
                account = self.accounts[specific_account.login]
            else:
                return False, "–£–∫–∞–∑–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", None, None
        else:
            # –ò–Ω–∞—á–µ –∏—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
            account = self.get_available_account(account_type)
            
        if not account:
            return False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤", None, None
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –∞—Ä–µ–Ω–¥–µ
        rental = Rental(account.login, user_id, username, duration_hours, order_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
        account.status = "rented"
        account.rental_id = rental.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.rentals[rental.id] = rental
        self.save_data()
        
        return True, "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω", account, rental
    
    def return_account(self, rental_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –æ—Ç –∞—Ä–µ–Ω–¥—ã"""
        if rental_id not in self.rentals:
            return False, "–ê—Ä–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        rental = self.rentals[rental_id]
        if not rental.is_active:
            return False, "–ê—Ä–µ–Ω–¥–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        
        # –ù–∞—Ö–æ–¥–∏–º –∞–∫–∫–∞—É–Ω—Ç
        if rental.account_login not in self.accounts:
            logger.error(f"{LOGGER_PREFIX} –ê–∫–∫–∞—É–Ω—Ç –¥–ª—è –∞—Ä–µ–Ω–¥—ã {rental_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            rental.is_active = False
            self.save_data()
            return False, "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        account = self.accounts[rental.account_login]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        account.status = "available"
        account.rental_id = None
        rental.is_active = False
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏–∏
        new_password = account.change_password()
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏–∏
        try:
            account.end_session()
            logger.info(f"{LOGGER_PREFIX} –°–µ—Å—Å–∏–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.login} –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account.login}: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.save_data()
        
        return True, "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω", new_password
    
    def check_expired_rentals(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –∞—Ä–µ–Ω–¥—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö —Å–ø–∏—Å–æ–∫"""
        expired_rentals = []
        
        for rental_id, rental in list(self.rentals.items()):
            if rental.is_active and rental.is_expired():
                account_login = rental.account_login
                if account_login in self.accounts:
                    account = self.accounts[account_login]
                    success, message, new_password = self.return_account(rental_id)
                    if success:
                        expired_rentals.append((rental, account, new_password))
                    else:
                        try:
                            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏—Å—Ç–µ–∫—à–µ–π –∞—Ä–µ–Ω–¥—ã: {message}")
                        except Exception:
                            pass
        
        return expired_rentals
    
    def get_account_by_type(self, account_type):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        if not account_type:
            return None
            
        logger.info(f"{LOGGER_PREFIX} –ü–æ–∏—Å–∫ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ —Ç–∏–ø—É: {account_type}")
            
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∏–ø–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        normalized_type = account_type.lower().replace('.', '').replace(' ', '')
        logger.info(f"{LOGGER_PREFIX} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–ø: {normalized_type}")
        
        # –í—ã–≤–æ–¥ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        available_types = [(account.login, account.type, account.status) for account in self.accounts.values()]
        logger.info(f"{LOGGER_PREFIX} –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã: {available_types}")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for login, account in self.accounts.items():
            if account.status == "available" and account.type.lower() == account_type.lower():
                logger.info(f"{LOGGER_PREFIX} –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {login} ({account.type})")
                return account
                
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∏—â–µ–º, —É–±—Ä–∞–≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        for login, account in self.accounts.items():
            if account.status == "available":
                normalized_account_type = account.type.lower().replace('.', '').replace(' ', '')
                if normalized_account_type == normalized_type:
                    logger.info(f"{LOGGER_PREFIX} –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {login} ({account.type})")
                    return account
                    
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è R.E.P.O / REPO
        if normalized_type == "repo":
            for login, account in self.accounts.items():
                if account.status == "available":
                    acc_type = account.type.lower().replace('.', '').replace(' ', '')
                    if acc_type == "repo":
                        logger.info(f"{LOGGER_PREFIX} –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ REPO: {login} ({account.type})")
                        return account
        
        logger.warning(f"{LOGGER_PREFIX} –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Ç–∏–ø–∞ {account_type}")                
        return None
    
    def extend_rental(self, rental_id, additional_hours):
        """–ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –∞—Ä–µ–Ω–¥—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤"""
        if rental_id not in self.rentals:
            return False, "–ê—Ä–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        rental = self.rentals[rental_id]
        if not rental.is_active:
            return False, "–ê—Ä–µ–Ω–¥–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        
        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –∞—Ä–µ–Ω–¥—É
        rental.extend_rental(additional_hours)
        self.save_data()
        
        return True, f"–ê—Ä–µ–Ω–¥–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {additional_hours} —á. –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {rental.get_formatted_end_time()}"
    
    def reset_account_password(self, login):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é"""
        if login not in self.accounts:
            return False, "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        account = self.accounts[login]
        if account.status == "rented":
            return False, "–ù–µ–ª—å–∑—è —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
        if account.reset_to_original_password():
            self.save_data()
            return True, f"–ü–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–±—Ä–æ—à–µ–Ω –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É: {account.password}"
        else:
            return False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å (–∏—Å—Ö–æ–¥–Ω—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω)"
    
    def get_account_info(self, login):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
        if login not in self.accounts:
            return None
        
        account = self.accounts[login]
        info = {
            "login": account.login,
            "password": account.password,
            "type": account.type,
            "status": account.status,
            "rental_id": account.rental_id,
            "has_api_key": bool(account.api_key),
            "original_password": account.original_password
        }
        
        # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –≤ –∞—Ä–µ–Ω–¥–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä–µ–Ω–¥–µ
        if account.status == "rented" and account.rental_id in self.rentals:
            rental = self.rentals[account.rental_id]
            remaining_time = rental.get_remaining_time()
            hours, remainder = divmod(remaining_time.seconds, 3600)
            minutes, _ = divmod(remainder, 60)
            
            info["rental"] = {
                "username": rental.username,
                "user_id": rental.user_id,
                "order_id": rental.order_id,
                "duration_hours": rental.duration_hours,
                "start_time": datetime.fromtimestamp(rental.start_time).strftime("%d.%m.%Y %H:%M"),
                "end_time": datetime.fromtimestamp(rental.end_time).strftime("%d.%m.%Y %H:%M"),
                "remaining_hours": hours,
                "remaining_minutes": minutes
            }
        
        return info

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞—Ä–µ–Ω–¥—ã
rental_manager = RentalManager()

# –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    global AUTO_START, admin_id, message_templates
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE, "r", encoding="utf-8") as f:
                config = json.load(f)
                AUTO_START = config.get("auto_start", AUTO_START)
                if "admin_id" in config and config["admin_id"] is not None:
                    admin_id = config["admin_id"]
                logger.info(f"{LOGGER_PREFIX} –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: {AUTO_START}")
                logger.info(f"{LOGGER_PREFIX} –ó–∞–≥—Ä—É–∂–µ–Ω admin_id: {admin_id}")
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    else:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        save_config()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    if os.path.exists(TEMPLATES_FILE):
        try:
            with open(TEMPLATES_FILE, "r", encoding="utf-8") as f:
                message_templates = json.load(f)
                logger.info(f"{LOGGER_PREFIX} –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(message_templates)} —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π")
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
            message_templates = DEFAULT_TEMPLATES.copy()
            save_templates()
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
        message_templates = DEFAULT_TEMPLATES.copy()
        save_templates()

def save_config():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        config = {
            "auto_start": AUTO_START,
            "admin_id": admin_id
        }
        with open(CONFIG_FILE, "w", encoding="utf-8") as f:
            json.dump(config, f, ensure_ascii=False, indent=2)
        logger.info(f"{LOGGER_PREFIX} –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        return True
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return False

def save_templates():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª"""
    try:
        with open(TEMPLATES_FILE, "w", encoding="utf-8") as f:
            json.dump(message_templates, f, ensure_ascii=False, indent=2)
        logger.info(f"{LOGGER_PREFIX} –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        return True
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return False

def load_lot_bindings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –ª–æ—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    global lot_bindings
    
    if os.path.exists(LOT_BINDINGS_FILE):
        try:
            with open(LOT_BINDINGS_FILE, "r", encoding="utf-8") as f:
                lot_bindings = json.load(f)
                logger.info(f"{LOGGER_PREFIX} –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(lot_bindings)} –ø—Ä–∏–≤—è–∑–æ–∫ –ª–æ—Ç–æ–≤")
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≤—è–∑–æ–∫ –ª–æ—Ç–æ–≤: {e}")
            lot_bindings = {}
    else:
        lot_bindings = {}
        save_lot_bindings()  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª

def save_lot_bindings():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –ª–æ—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(LOT_BINDINGS_FILE), exist_ok=True)
        
        with open(LOT_BINDINGS_FILE, "w", encoding="utf-8") as f:
            json.dump(lot_bindings, f, ensure_ascii=False, indent=2)
        logger.info(f"{LOGGER_PREFIX} –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(lot_bindings)} –ø—Ä–∏–≤—è–∑–æ–∫ –ª–æ—Ç–æ–≤")
        return True
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–æ–∫ –ª–æ—Ç–æ–≤: {e}")
        return False

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è admin_id
def set_admin_id_cmd(message):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    global admin_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω admin_id
    if admin_id:
        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∞–¥–º–∏–Ω
        if message.chat.id != admin_id:
            CARDINAL.telegram.bot.send_message(
                message.chat.id,
                "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
                "–¢–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                parse_mode="HTML"
            )
            return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = message.text.strip()
    if text.startswith('/admin_id'):
        text = text[len('/admin_id'):].strip()
    
    if text:
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID –≤ –∫–æ–º–∞–Ω–¥–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
        try:
            new_admin_id = int(text)
            admin_id = new_admin_id
            save_config()
            
            CARDINAL.telegram.bot.send_message(
                message.chat.id,
                "‚úÖ <b>ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
                f"–ù–æ–≤—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: <code>{admin_id}</code>",
                parse_mode="HTML"
            )
        except ValueError:
            CARDINAL.telegram.bot.send_message(
                message.chat.id,
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                "ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/admin_id 123456789</code>",
                parse_mode="HTML"
            )
    else:
        # –ï—Å–ª–∏ ID –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π ID
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–π ID", callback_data=f"srent_set_admin_id_{message.chat.id}"))
        
        CARDINAL.telegram.bot.send_message(
            message.chat.id,
            "üîê <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π ID –≤ –∫–∞—á–µ—Å—Ç–≤–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n"
            f"–í–∞—à ID: <code>{message.chat.id}</code>\n\n"
            "–ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ ID –≤—Ä—É—á–Ω—É—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:\n"
            "<code>/admin_id –ß–ò–°–õ–û</code>",
            reply_markup=markup,
            parse_mode="HTML"
        )

def set_admin_id_callback(call=None, *args, **kwargs):
    if args and isinstance(args[0], telebot.types.CallbackQuery):
        call = args[0]
    if not isinstance(call, telebot.types.CallbackQuery):
        return
    if args and isinstance(args[0], telebot.types.CallbackQuery):
        call = args[0]
    if not isinstance(call, telebot.types.CallbackQuery):
        return
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ callback"""
    global admin_id
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ callback data
    data = call.data.split('_')
    if len(data) < 4:
        CARDINAL.telegram.bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö callback")
        return
    
    try:
        new_admin_id = int(data[3])
        admin_id = new_admin_id
        save_config()
        
        CARDINAL.telegram.bot.edit_message_text(
            "‚úÖ <b>ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            f"–ù–æ–≤—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: <code>{admin_id}</code>",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="HTML"
        )
        CARDINAL.telegram.bot.answer_callback_query(call.id, "ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    except ValueError:
        CARDINAL.telegram.bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def list_templates_cmd(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if admin_id and message.chat.id != admin_id:
        CARDINAL.telegram.bot.send_message(
            message.chat.id,
            "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
            "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —à–∞–±–ª–æ–Ω–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.",
            parse_mode="HTML"
        )
        return
    
    if not message_templates:
        CARDINAL.telegram.bot.send_message(
            message.chat.id,
            "‚ÑπÔ∏è <b>–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞.",
            parse_mode="HTML"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
    templates_text = "üìù <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π:</b>\n\n"
    for name, template in message_templates.items():
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
        preview = template[:100] + "..." if len(template) > 100 else template
        templates_text += f"<b>{name}</b>\n{preview}\n\n"
        templates_text += f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: <code>/edit_template {name}</code>\n\n"
    
    templates_text += "\n<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏:</b>\n"
    templates_text += "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å: <code>/view_template –ò–ú–Ø</code>\n"
    templates_text += "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: <code>/edit_template –ò–ú–Ø</code>\n"
    templates_text += "‚Ä¢ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º: <code>/reset_templates</code>"
    
    CARDINAL.telegram.bot.send_message(
        message.chat.id,
        templates_text,
        parse_mode="HTML"
    )

def view_template_cmd(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if admin_id and message.chat.id != admin_id:
        CARDINAL.telegram.bot.send_message(
            message.chat.id,
            "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
            "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π.",
            parse_mode="HTML"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —à–∞–±–ª–æ–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = message.text.strip()
    if text.startswith('/view_template'):
        text = text[len('/view_template'):].strip()
    
    if not text:
        CARDINAL.telegram.bot.send_message(
            message.chat.id,
            "‚ùå <b>–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —à–∞–±–ª–æ–Ω–∞</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/view_template –ò–ú–Ø</code>\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π <code>/templates</code>",
            parse_mode="HTML"
        )
        return
    
    # –ò—â–µ–º —à–∞–±–ª–æ–Ω
    if text in message_templates:
        template = message_templates[text]
        
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"srent_edit_template_{text}"))
        markup.row(InlineKeyboardButton("‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É —à–∞–±–ª–æ–Ω–æ–≤", callback_data="srent_list_templates"))
        
        CARDINAL.telegram.bot.send_message(
            message.chat.id,
            f"üìù <b>–®–∞–±–ª–æ–Ω: {text}</b>\n\n"
            f"{template}",
            reply_markup=markup,
            parse_mode="HTML"
        )
    else:
        CARDINAL.telegram.bot.send_message(
            message.chat.id,
            "‚ùå <b>–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
            f"–®–∞–±–ª–æ–Ω —Å –∏–º–µ–Ω–µ–º '{text}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π <code>/templates</code>",
            parse_mode="HTML"
        )

def edit_template_cmd(message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if admin_id and message.chat.id != admin_id:
        CARDINAL.telegram.bot.send_message(
            message.chat.id,
            "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
            "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π.",
            parse_mode="HTML"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —à–∞–±–ª–æ–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = message.text.strip()
    if text.startswith('/edit_template'):
        text = text[len('/edit_template'):].strip()
    
    if not text:
        CARDINAL.telegram.bot.send_message(
            message.chat.id,
            "‚ùå <b>–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —à–∞–±–ª–æ–Ω–∞</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/edit_template –ò–ú–Ø</code>\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π <code>/templates</code>",
            parse_mode="HTML"
        )
        return
    
    # –ò—â–µ–º —à–∞–±–ª–æ–Ω
    if text in message_templates:
        template = message_templates[text]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        EDIT_TEMPLATE_STATES[message.chat.id] = {
            "template_name": text,
            "editing": True
        }
        
        CARDINAL.telegram.bot.send_message(
            message.chat.id,
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞: {text}</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω:\n\n"
            f"{template}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n"
            f"‚Ä¢ {{login}} - –ª–æ–≥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞\n"
            f"‚Ä¢ {{password}} - –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞\n"
            f"‚Ä¢ {{account_type}} - —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞\n"
            f"‚Ä¢ {{duration_hours}} - —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã –≤ —á–∞—Å–∞—Ö\n"
            f"‚Ä¢ {{end_time}} - –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã\n"
            f"‚Ä¢ {{username}} - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            f"‚Ä¢ {{order_id}} - ID –∑–∞–∫–∞–∑–∞\n"
            f"‚Ä¢ {{new_password}} - –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏)",
            parse_mode="HTML"
        )
    else:
        CARDINAL.telegram.bot.send_message(
            message.chat.id,
            "‚ùå <b>–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
            f"–®–∞–±–ª–æ–Ω —Å –∏–º–µ–Ω–µ–º '{text}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π <code>/templates</code>",
            parse_mode="HTML"
        )

def handle_template_edit(message):
    if message.chat.id in EDIT_TEMPLATE_STATES:
        template_data = EDIT_TEMPLATE_STATES.pop(message.chat.id)
        template_name = template_data["template_name"]
        new_template = message.text
        
        message_templates[template_name] = new_template
        save_templates()
        
        CARDINAL.telegram.bot.send_message(
            message.chat.id,
            f"‚úÖ <b>–®–∞–±–ª–æ–Ω '{template_name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>",
            parse_mode="HTML"
        )
        
        list_templates_callback(message)
        
        return True
    
    if message.chat.id in ADD_BINDING_STATES:
        if handle_binding_add_steps(message):
            return True
    
    return handle_account_add_steps(message)

def reset_templates_cmd(message):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if admin_id and message.chat.id != admin_id:
        CARDINAL.telegram.bot.send_message(
            message.chat.id,
            "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
            "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π.",
            parse_mode="HTML"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="srent_reset_templates_confirm"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="srent_reset_templates_cancel")
    )
    
    CARDINAL.telegram.bot.send_message(
        message.chat.id,
        "‚ö†Ô∏è <b>–°–±—Ä–æ—Å —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=markup,
        parse_mode="HTML"
    )

def reset_templates_confirm_callback(call=None, *args, **kwargs):
    if args and isinstance(args[0], telebot.types.CallbackQuery):
        call = args[0]
    if not isinstance(call, telebot.types.CallbackQuery):
        return
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–±—Ä–æ—Å —à–∞–±–ª–æ–Ω–æ–≤ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º"""
    global message_templates
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω—ã
    message_templates = DEFAULT_TEMPLATES.copy()
    save_templates()
    
    CARDINAL.telegram.bot.edit_message_text(
        "‚úÖ <b>–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω—ã</b>\n\n"
        "–í—Å–µ —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω—ã –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º.",
        call.message.chat.id,
        call.message.message_id,
        parse_mode="HTML"
    )
    
    CARDINAL.telegram.bot.answer_callback_query(call.id, "–®–∞–±–ª–æ–Ω—ã —Å–±—Ä–æ—à–µ–Ω—ã!")

def reset_templates_cancel_callback(call=None, *args, **kwargs):
    if args and isinstance(args[0], telebot.types.CallbackQuery):
        call = args[0]
    if not isinstance(call, telebot.types.CallbackQuery):
        return
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–±—Ä–æ—Å —à–∞–±–ª–æ–Ω–æ–≤"""
    CARDINAL.telegram.bot.edit_message_text(
        "‚ùå <b>–°–±—Ä–æ—Å —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
        "–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
        call.message.chat.id,
        call.message.message_id,
        parse_mode="HTML"
    )
    
    CARDINAL.telegram.bot.answer_callback_query(call.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

# –û—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∞—Ä–µ–Ω–¥
def check_rentals_thread():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ç–µ–∫—à–∏—Ö –∞—Ä–µ–Ω–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    logger.info(f"{LOGGER_PREFIX} –ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∞—Ä–µ–Ω–¥")
    
    while True:
        try:
            if RUNNING:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∞—Ä–µ–Ω–¥—ã
                expired_rentals = rental_manager.check_expired_rentals()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∞—Ä–µ–Ω–¥—ã
                for rental, account, new_password in expired_rentals:
                    logger.info(f"{LOGGER_PREFIX} –ê—Ä–µ–Ω–¥–∞ –∏—Å—Ç–µ–∫–ª–∞: {rental.account_login} ({rental.username})")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    try:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        message = "–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã –∞–∫–∫–∞—É–Ω—Ç–∞ Steam –∏—Å—Ç–µ–∫. –î–æ—Å—Ç—É–ø –ø—Ä–µ–∫—Ä–∞—â–µ–Ω, –ø–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω."
                        
                        if hasattr(CARDINAL, 'account') and hasattr(CARDINAL.account, 'send_message'):
                            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
                            chat_id = f"users-{rental.user_id}-{CARDINAL.account.id}"
                            interlocutor_id = rental.user_id
                            chat_name = f"–ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å {rental.username}"
                            
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                            CARDINAL.account.send_message(chat_id, message, chat_name, interlocutor_id, None, True, False, False)
                            logger.info(f"{LOGGER_PREFIX} –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {rental.username}")
                        else:
                            logger.warning(f"{LOGGER_PREFIX} –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                    except Exception as e:
                        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã: {e}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                    if admin_id:
                        try:
                            admin_message = format_message("admin_rental_end", 
                                username=rental.username,
                                login=rental.account_login,
                                account_type=account.type,
                                new_password=new_password
                            )
                            
                            CARDINAL.telegram.bot.send_message(
                                admin_id,
                                admin_message,
                                parse_mode="HTML"
                            )
                        except Exception as e:
                            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä–µ–Ω–¥: {e}")
            time.sleep(60)  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ –∂–¥–µ–º –º–∏–Ω—É—Ç—É

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
def init_plugin(c):
    """–§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–∞"""
    global CARDINAL, RUNNING, AUTO_START
    CARDINAL = c
    
    logger.info(f"{LOGGER_PREFIX} –ü–ª–∞–≥–∏–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    load_config()
    load_lot_bindings()
    
    try:
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –≤ Telegram
        c.add_telegram_commands(UUID, [
            ("srent_menu", "–ú–µ–Ω—é –∞—Ä–µ–Ω–¥—ã Steam", True),
        ])
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        c.telegram.msg_handler(show_menu, commands=["srent_menu"])
        c.telegram.msg_handler(add_account_cmd, commands=["srent_add"])
        c.telegram.msg_handler(interactive_add_account_start, commands=["steam_add"])
        c.telegram.msg_handler(list_accounts_cmd, commands=["steam_list", "srent_list"])
        c.telegram.msg_handler(list_rentals_cmd, commands=["steam_active"])
        c.telegram.msg_handler(start_rental_system, commands=["srent_start"])
        c.telegram.msg_handler(stop_rental_system, commands=["srent_stop"])
        c.telegram.msg_handler(force_return_account_cmd, commands=["srent_force"])
        c.telegram.msg_handler(manual_rent_account_cmd, commands=["srent_manual"])
        c.telegram.msg_handler(return_account_cmd, commands=["srent_return"])
        c.telegram.msg_handler(del_account_cmd, commands=["srent_del"])
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ª–æ—Ç–æ–≤
        c.telegram.msg_handler(unbind_lot_cmd, commands=["srent_unbind"])
        c.telegram.msg_handler(list_bindings_cmd, commands=["srent_bindings"])
        c.telegram.msg_handler(bind_lot_cmd, commands=["srent_bind"])
        c.telegram.msg_handler(help_lot_binding_cmd, commands=["srent_help"])
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞–º–∏
        c.telegram.msg_handler(list_templates_cmd, commands=["templates", "srent_templates"])
        c.telegram.msg_handler(view_template_cmd, commands=["view_template"])
        c.telegram.msg_handler(edit_template_cmd, commands=["edit_template"])
        c.telegram.msg_handler(reset_templates_cmd, commands=["reset_templates"])
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ admin_id
        c.telegram.msg_handler(set_admin_id_cmd, commands=["admin_id", "srent_admin"])
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        c.telegram.msg_handler(handle_account_add_steps_and_template_edit, content_types=["text"])
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        c.telegram.msg_handler(show_menu, func=lambda message: message.text == "–ú–µ–Ω—éüíª" or message.text == "–º–µ–Ω—é")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é
        try:
            menu_kb = ReplyKeyboardMarkup(resize_keyboard=True)
            menu_kb.add(KeyboardButton("–ú–µ–Ω—éüíª"))
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω —á–∞—Ç—ã –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞—Ä–¥–∏–Ω–∞–ª–∞ –∏–ª–∏ –∏–∑ –Ω–∞—à–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            admin_ids = []
            if admin_id:
                admin_ids = [admin_id]
            elif hasattr(c, "MAIN_CFG") and "telegram" in c.MAIN_CFG and "admin_id" in c.MAIN_CFG["telegram"]:
                admin_ids = [c.MAIN_CFG["telegram"]["admin_id"]]
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ–Ω—é –∞–¥–º–∏–Ω–∞–º
            for chat_id in admin_ids:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    c.telegram.bot.send_message(
                        chat_id,
                        "üéÆ <b>–°–∏—Å—Ç–µ–º–∞ –∞—Ä–µ–Ω–¥—ã Steam –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</b>\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ú–µ–Ω—éüíª</b> –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º.",
                        reply_markup=menu_kb,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é –∞–¥–º–∏–Ω—É {chat_id}: {e}")
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é: {e}")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        @c.telegram.bot.callback_query_handler(func=lambda call: call.data.startswith("srent_"))
        def handle_button_press(call, *args, **kwargs):
            if args and isinstance(args[0], telebot.types.CallbackQuery):
                call = args[0]
            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–æ–±—ã—Ö callbacks
                if call.data.startswith("srent_set_admin_id_"):
                    set_admin_id_callback(call)
                    return
                elif call.data.startswith("srent_edit_template_"):
                    template_name = call.data.replace("srent_edit_template_", "")
                    edit_template_callback(call, template_name)
                    return
                elif call.data == "srent_reset_templates_confirm":
                    reset_templates_confirm_callback(call)
                    return
                elif call.data == "srent_reset_templates_cancel":
                    reset_templates_cancel_callback(call)
                    return
                elif call.data == "srent_list_templates":
                    list_templates_callback(call)
                    return
                elif call.data == "srent_cancel_add":
                    cancel_add_account_callback(call)
                    return
                
                # –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–æ–∫ –ª–æ—Ç–æ–≤
                if call.data == "srent_lot_bindings":
                    show_lot_bindings_callback(call)
                    return
                elif call.data.startswith("srent_binding_"):
                    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: srent_binding_HASH
                    binding_hash = call.data.replace("srent_binding_", "")
                    manage_binding_callback(call, binding_hash)
                    return
                elif call.data == "srent_add_binding":
                    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏
                    start_add_binding_callback(call)
                    return
                elif call.data == "srent_binding_help":
                    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é help_lot_binding_cmd —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–∑ call
                    help_lot_binding_callback(call)
                    return
                elif call.data == "srent_all_bindings":
                    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø—Ä–∏–≤—è–∑–æ–∫
                    show_all_bindings_callback(call)
                    return
                elif call.data == "srent_cancel_binding":
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏
                    cancel_binding_callback(call)
                    return
                elif call.data.startswith("srent_binding_duration_"):
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–≤—è–∑–∫–∏
                    binding_duration_callback(call)
                    return
                elif call.data.startswith("srent_edit_binding_type_"):
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–∏–≤—è–∑–∫–∏
                    binding_hash = call.data.replace("srent_edit_binding_type_", "")
                    edit_binding_type_callback(call, binding_hash)
                    return
                elif call.data.startswith("srent_edit_binding_time_"):
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≤—è–∑–∫–∏
                    binding_hash = call.data.replace("srent_edit_binding_time_", "")
                    edit_binding_time_callback(call, binding_hash)
                    return
                elif call.data.startswith("srent_delete_binding_"):
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏
                    binding_hash = call.data.replace("srent_delete_binding_", "")
                    delete_binding_callback(call, binding_hash)
                    return
                    
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ callback data
                action = call.data.split("_")[1] if len(call.data.split("_")) > 1 else ""
                
                if action == "menu":
                    show_menu_callback(call)
                elif action == "start":
                    start_rental_callback(call)
                elif action == "stop":
                    stop_rental_callback(call)
                elif action == "status":
                    show_status_callback(call)
                elif action == "accounts":
                    show_accounts_callback(call)
                elif action == "rentals":
                    show_rentals_callback(call)
                elif action == "add":
                    interactive_add_account_start_callback(call)
                elif action == "delete" and len(call.data.split("_")) > 2:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–æ–≥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    login = call.data.split("_")[2]
                    delete_account_callback(call, login)
                elif action == "return":
                    show_return_account_callback(call)
                elif action == "show" and call.data == "srent_show_bindings":
                    list_bindings_cmd(call.message)
                elif action == "force" and call.data.startswith("srent_force_return_"):
                    login = call.data.replace("srent_force_return_", "")
                    force_return_account_from_callback(call, login)
                else:
                    CARDINAL.telegram.bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            except Exception as e:
                logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}")
                try:
                    CARDINAL.telegram.bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)[:50]}")
                except:
                    pass
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ç–µ–∫—à–∏—Ö –∞—Ä–µ–Ω–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        check_thread = threading.Thread(target=check_rentals_thread, daemon=True)
        check_thread.start()
        
        # –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞—Ä–µ–Ω–¥—ã –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if AUTO_START:
            RUNNING = True
            logger.info(f"{LOGGER_PREFIX} –°–∏—Å—Ç–µ–º–∞ –∞—Ä–µ–Ω–¥—ã –∑–∞–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        
        logger.info(f"{LOGGER_PREFIX} –ü–ª–∞–≥–∏–Ω —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        return True
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–∞: {e}")
        return False


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
def handle_account_add_steps_and_template_edit(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —à–∞–≥–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
    if message.chat.id in EDIT_TEMPLATE_STATES:
        if handle_template_edit(message):
            return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏
    if message.chat.id in ADD_BINDING_STATES:
        if handle_binding_add_steps(message):
            return True
    
    # –ï—Å–ª–∏ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω –∏ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
    return handle_account_add_steps(message)

# Callback –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
def edit_template_callback(call=None, template_name=None, *args, **kwargs):
    if args and isinstance(args[0], telebot.types.CallbackQuery):
        call = args[0]
    if not isinstance(call, telebot.types.CallbackQuery):
        return
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if admin_id and call.message.chat.id != admin_id:
        CARDINAL.telegram.bot.answer_callback_query(call.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
    if template_name not in message_templates:
        CARDINAL.telegram.bot.answer_callback_query(call.id, "–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    template = message_templates[template_name]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    EDIT_TEMPLATE_STATES[call.message.chat.id] = {
        "template_name": template_name,
        "editing": True
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —à–∞–±–ª–æ–Ω–∞
    template_titles = {
        "rental_start": "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã",
        "rental_end": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã",
        "rental_force_end": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ä–æ—á–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏",
        "admin_rental_start": "–°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –ø–æ–∫—É–ø–∫–µ",
        "admin_rental_end": "–°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã"
    }
    
    title = template_titles.get(template_name, template_name)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton("‚ùå –û–¢–ú–ï–ù–ê", callback_data="srent_list_templates"))
    
    CARDINAL.telegram.bot.edit_message_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞: {title}</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω:\n\n"
        f"{template}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        f"<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:</b>\n"
        f"‚Ä¢ <code>{{{{'login'}}}}</code> - –ª–æ–≥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞\n"
        f"‚Ä¢ <code>{{{{'password'}}}}</code> - –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞\n"
        f"‚Ä¢ <code>{{{{'account_type'}}}}</code> - —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞\n"
        f"‚Ä¢ <code>{{{{'duration_hours'}}}}</code> - —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã –≤ —á–∞—Å–∞—Ö\n"
        f"‚Ä¢ <code>{{{{'end_time'}}}}</code> - –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã\n"
        f"‚Ä¢ <code>{{{{'username'}}}}</code> - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        f"‚Ä¢ <code>{{{{'order_id'}}}}</code> - ID –∑–∞–∫–∞–∑–∞\n"
        f"‚Ä¢ <code>{{{{'new_password'}}}}</code> - –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏)",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup,
        parse_mode="HTML"
    )
    
    CARDINAL.telegram.bot.answer_callback_query(call.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞")

# Callback –¥–ª—è —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
def list_templates_callback(call=None, *args, **kwargs):
    if args and isinstance(args[0], telebot.types.CallbackQuery):
        call = args[0]
    if not isinstance(call, telebot.types.CallbackQuery):
        return
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if admin_id and call.message.chat.id != admin_id:
        CARDINAL.telegram.bot.answer_callback_query(call.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    if not message_templates:
        CARDINAL.telegram.bot.edit_message_text(
            "‚ÑπÔ∏è <b>–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞.",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="HTML"
        )
        CARDINAL.telegram.bot.answer_callback_query(call.id, "–ù–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    templates_text = "‚úèÔ∏è <b>–¢–ï–ö–°–¢ –®–ê–ë–õ–û–ù–û–í</b>\n\n"
    templates_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    templates_text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π:\n"
    
    # –°–æ–∑–¥–∞–µ–º —É–¥–æ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤
    markup = InlineKeyboardMarkup(row_width=1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
    markup.row(InlineKeyboardButton("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ‚úÖ", callback_data="srent_edit_template_rental_start"))
    markup.row(InlineKeyboardButton("–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã üçâ", callback_data="srent_edit_template_rental_end"))
    markup.row(InlineKeyboardButton("–°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ä–æ—á–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ ‚ö†Ô∏è", callback_data="srent_edit_template_rental_force_end"))
    markup.row(InlineKeyboardButton("–°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –ø–æ–∫—É–ø–∫–µ üõí", callback_data="srent_edit_template_admin_rental_start"))
    markup.row(InlineKeyboardButton("–°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã üï∏Ô∏è", callback_data="srent_edit_template_admin_rental_end"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    for name in message_templates:
        if name not in DEFAULT_TEMPLATES:
            markup.row(InlineKeyboardButton(f"‚úèÔ∏è {name}", callback_data=f"srent_edit_template_{name}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–±—Ä–æ—Å–∞ —à–∞–±–ª–æ–Ω–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    markup.row(InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —à–∞–±–ª–æ–Ω—ã", callback_data="srent_reset_templates_confirm"))
    markup.row(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="srent_menu"))
    
    CARDINAL.telegram.bot.edit_message_text(
        templates_text,
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup,
        parse_mode="HTML"
    )
    
    CARDINAL.telegram.bot.answer_callback_query(call.id, "–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è API
def start_rent_plugin():
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–≥–∏–Ω–∞ —á–µ—Ä–µ–∑ API"""
    global RUNNING
    if not RUNNING:
        RUNNING = True
        logger.info(f"{LOGGER_PREFIX} –°–∏—Å—Ç–µ–º–∞ –∞—Ä–µ–Ω–¥—ã –∑–∞–ø—É—â–µ–Ω–∞ —á–µ—Ä–µ–∑ API")
        return True, "–°–∏—Å—Ç–µ–º–∞ –∞—Ä–µ–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞"
    return False, "–°–∏—Å—Ç–µ–º–∞ –∞—Ä–µ–Ω–¥—ã —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞"

def stop_rent_plugin():
    """–§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–≥–∏–Ω–∞ —á–µ—Ä–µ–∑ API"""
    global RUNNING
    if RUNNING:
        RUNNING = False
        logger.info(f"{LOGGER_PREFIX} –°–∏—Å—Ç–µ–º–∞ –∞—Ä–µ–Ω–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ API")
        return True, "–°–∏—Å—Ç–µ–º–∞ –∞—Ä–µ–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    return False, "–°–∏—Å—Ç–µ–º–∞ –∞—Ä–µ–Ω–¥—ã —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"

def add_steam_account(login, password, account_type="standard", api_key=None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ API"""
    success, message = rental_manager.add_account(login, password, account_type, api_key)
    return {"success": success, "message": message}

def check_rentals():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∞—Ä–µ–Ω–¥"""
    if not RUNNING:
        return False, "–°–∏—Å—Ç–µ–º–∞ –∞—Ä–µ–Ω–¥—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞"
    
    try:
        expired_rentals = rental_manager.check_expired_rentals()
        return True, {
            "expired": len(expired_rentals),
            "active": sum(1 for rent in rental_manager.rentals.values() if rent.is_active),
            "total_accounts": len(rental_manager.accounts),
            "available_accounts": sum(1 for acc in rental_manager.accounts.values() if acc.status == "available")
        }
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—Ä–µ–Ω–¥: {e}")
        return False, f"–û—à–∏–±–∫–∞: {e}"

def delete_steam_account(login):
    """–£–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ API"""
    success, message = rental_manager.remove_account(login)
    return {"success": success, "message": message}

def set_auto_start(enabled):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞"""
    global AUTO_START
    try:
        AUTO_START = bool(enabled)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_file = os.path.join(DATA_DIR, "config.json")
        with open(config_file, "w", encoding="utf-8") as f:
            json.dump({"auto_start": AUTO_START}, f)
        return {"success": True, "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"}
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞: {e}")
        return {"success": False, "message": f"–û—à–∏–±–∫–∞: {e}"}

def message_handler(c, event, *args):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not RUNNING:
        return
    
    if not hasattr(event, "message") or not event.message:
        return
        
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ–±—è –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    if event.message.author_id == c.account.id:
        return
        
    message = event.message
    username = message.author
    user_id = message.author_id
    text = message.text
    
    logger.info(f"{LOGGER_PREFIX} –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username}: {text}")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –∞—Ä–µ–Ω–¥–µ
    
    # –í –¥–∞–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Å–æ–±–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π,
    # –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ Telegram-–∫–æ–º–∞–Ω–¥—ã

def order_handler(c, event, *args):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    if not RUNNING:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    if not hasattr(event, "order") or not event.order:
        return
    
    order = event.order
    logger.info(f"{LOGGER_PREFIX} –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑: {order.id}")
    
    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    logger.info(f"{LOGGER_PREFIX} –û—Ç–ª–∞–¥–∫–∞ –∑–∞–∫–∞–∑–∞: {vars(order)}")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞
    lot_description = None
    if hasattr(order, 'description'):
        full_description = order.description
        logger.info(f"{LOGGER_PREFIX} –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞: {full_description}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞, –æ—Ç–±—Ä–∞—Å—ã–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        # –§–æ—Ä–º–∞—Ç: "–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞, –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è"
        parts = full_description.split(',', 1)
        lot_name = parts[0].strip()
        logger.info(f"{LOGGER_PREFIX} –ò–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞: {lot_name}")
    else:
        logger.info(f"{LOGGER_PREFIX} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞")
        return

    # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ª–æ—Ç–∞
    matching_binding = None
    matching_name = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if lot_name in lot_bindings:
        matching_binding = lot_bindings[lot_name]
        matching_name = lot_name
        logger.info(f"{LOGGER_PREFIX} –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: '{lot_name}'")
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–∏–≤—è–∑–∫—É - –≤—ã—Ö–æ–¥–∏–º
    if not matching_binding:
        logger.info(f"{LOGGER_PREFIX} –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id} —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {lot_name}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã
    account_type = matching_binding["account_type"]
    duration_hours = matching_binding["duration_hours"]
    
    logger.info(f"{LOGGER_PREFIX} –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–≤—è–∑–∫—É '{matching_name}': —Ç–∏–ø={account_type}, —á–∞—Å—ã={duration_hours}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = None
    username = None
    
    if hasattr(order, 'buyer_id'):
        user_id = order.buyer_id
    if hasattr(order, 'buyer') and hasattr(order.buyer, 'username'):
        username = order.buyer.username
    elif hasattr(order, 'buyer_username'):
        username = order.buyer_username
    elif hasattr(order, 'buyer_name'):
        username = order.buyer_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã
    if not user_id or not username:
        try:
            logger.error(f"{LOGGER_PREFIX} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.id}")
        except Exception:
            pass
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞
    account = rental_manager.get_account_by_type(account_type)
    
    if not account:
        try:
            logger.error(f"{LOGGER_PREFIX} –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Ç–∏–ø–∞ {account_type}")
        except Exception:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        if CARDINAL and hasattr(CARDINAL, "MAIN_CFG") and "telegram" in CARDINAL.MAIN_CFG and "admin_id" in CARDINAL.MAIN_CFG["telegram"]:
            admin_id = CARDINAL.MAIN_CFG["telegram"]["admin_id"]
            try:
                error_message = f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –∞—Ä–µ–Ω–¥—ã –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n" \
                               f"–ó–∞–∫–∞–∑: <code>#{order.id}</code>\n" \
                               f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <b>{username}</b>\n" \
                               f"–¢—Ä–µ–±—É–µ–º—ã–π —Ç–∏–ø: <code>{account_type}</code>\n\n" \
                               f"<b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞!</b>"
                CARDINAL.telegram.bot.send_message(admin_id, error_message, parse_mode="HTML")
            except:
                pass
        
        return
    
    # –ê—Ä–µ–Ω–¥—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
    success, message_text, account, rental = rental_manager.rent_account(
        user_id, username, duration_hours, account_type, order.id
    )
    
    if not success:
        try:
            logger.error(f"{LOGGER_PREFIX} –ù–µ —É–¥–∞–ª–æ—Å—å –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç: {message_text}")
        except Exception:
            pass
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –ø—Ä–æ–±–ª–µ–º–µ
        if CARDINAL and hasattr(CARDINAL, "MAIN_CFG") and "telegram" in CARDINAL.MAIN_CFG and "admin_id" in CARDINAL.MAIN_CFG["telegram"]:
            admin_id = CARDINAL.MAIN_CFG["telegram"]["admin_id"]
            try:
                error_message = f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –∞—Ä–µ–Ω–¥—ã –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n" \
                               f"–ó–∞–∫–∞–∑: <code>#{order.id}</code>\n" \
                               f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <b>{username}</b>\n" \
                               f"–¢—Ä–µ–±—É–µ–º—ã–π —Ç–∏–ø: <code>{account_type}</code>\n\n" \
                               f"<b>–û—à–∏–±–∫–∞:</b> {message_text}"
                CARDINAL.telegram.bot.send_message(admin_id, error_message, parse_mode="HTML")
            except:
                pass
        
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä–µ–Ω–¥–µ
    end_time_str = datetime.fromtimestamp(rental.end_time).strftime("%d.%m.%Y %H:%M")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –∂–µ—Å—Ç–∫–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    message = format_message("rental_start", 
        login=account.login,
        password=account.password,
        account_type=account.type,
        duration_hours=duration_hours,
        end_time=end_time_str,
        username=username,
        order_id=order.id
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç—ã–º —Å–ø–æ—Å–æ–±–æ–º
    try:
        # –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ FunPay
        if hasattr(c, 'account') and hasattr(c.account, 'send_message'):
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
            chat_id = f"users-{user_id}-{c.account.id}"
            interlocutor_id = user_id
            chat_name = f"–ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å {username}"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            c.account.send_message(chat_id, message, chat_name, interlocutor_id, None, True, False, False)
            logger.info(f"{LOGGER_PREFIX} –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}")
        else:
            logger.warning(f"{LOGGER_PREFIX} –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if CARDINAL and hasattr(CARDINAL, "MAIN_CFG") and "telegram" in CARDINAL.MAIN_CFG and "admin_id" in CARDINAL.MAIN_CFG["telegram"]:
            admin_id = CARDINAL.MAIN_CFG["telegram"]["admin_id"]
            try:
                admin_message = f"‚ö†Ô∏è <b>–ê–∫–∫–∞—É–Ω—Ç –≤—ã–¥–∞–Ω (–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è)</b>\n\n" \
                              f"–ó–∞–∫–∞–∑: <code>#{order.id}</code>\n" \
                              f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <b>{username}</b>\n" \
                              f"–ê–∫–∫–∞—É–Ω—Ç: <code>{account.login}</code>\n" \
                              f"–ü–∞—Ä–æ–ª—å: <code>{account.password}</code>\n" \
                              f"–¢–∏–ø: <code>{account.type}</code>\n" \
                              f"–°—Ä–æ–∫: <code>{duration_hours} —á.</code>\n\n" \
                              f"<b>–û—à–∏–±–∫–∞:</b> {str(e)}"
                CARDINAL.telegram.bot.send_message(admin_id, admin_message, parse_mode="HTML")
            except:
                pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if CARDINAL and hasattr(CARDINAL, "MAIN_CFG") and "telegram" in CARDINAL.MAIN_CFG and "admin_id" in CARDINAL.MAIN_CFG["telegram"]:
        admin_id = CARDINAL.MAIN_CFG["telegram"]["admin_id"]
        try:
            admin_message = f"‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç –≤—ã–¥–∞–Ω</b>\n\n" \
                          f"–ó–∞–∫–∞–∑: <code>#{order.id}</code>\n" \
                          f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <b>{username}</b>\n" \
                          f"–ê–∫–∫–∞—É–Ω—Ç: <code>{account.login}</code>\n" \
                          f"–ü–∞—Ä–æ–ª—å: <code>{account.password}</code>\n" \
                          f"–¢–∏–ø: <code>{account.type}</code>\n" \
                          f"–°—Ä–æ–∫: <code>{duration_hours} —á.</code>"
            CARDINAL.telegram.bot.send_message(admin_id, admin_message, parse_mode="HTML")
        except:
            pass

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ)
BIND_TO_PRE_INIT = [init_plugin]
BIND_TO_NEW_MESSAGE = [message_handler]
BIND_TO_NEW_ORDER = [order_handler]  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
BIND_TO_DELETE = []
BIND_TO_API = {
    "start_rent_plugin": start_rent_plugin, 
    "stop_rent_plugin": stop_rent_plugin,
    "add_steam_account": add_steam_account,
    "check_rentals": check_rentals,
    "delete_steam_account": delete_steam_account,
    "set_auto_start": set_auto_start
}

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
def interactive_add_account_start(message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        chat_id = message.chat.id
        ADD_ACCOUNT_STATES[chat_id] = {"state": "login", "data": {}}
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="srent_cancel_add"))
        
        CARDINAL.telegram.bot.send_message(
            chat_id,
            "üéÆ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Steam</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–ª–æ–≥–∏–Ω</b> –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –Ω–∞–ø–∏—Å–∞–≤ <code>–æ—Ç–º–µ–Ω–∞</code> –∏–ª–∏ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã.",
            reply_markup=markup,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ interactive_add_account_start: {e}")
        try:
            CARDINAL.telegram.bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        except:
            pass

def interactive_add_account_start_callback(call=None, *args, **kwargs):
    if args and isinstance(args[0], telebot.types.CallbackQuery):
        call = args[0]
    if not isinstance(call, telebot.types.CallbackQuery):
        return
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ (callback)"""
    try:
        chat_id = call.message.chat.id
        ADD_ACCOUNT_STATES[chat_id] = {"state": "login", "data": {}}
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="srent_cancel_add"))
        
        CARDINAL.telegram.bot.edit_message_text(
            "üéÆ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Steam</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–ª–æ–≥–∏–Ω</b> –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –Ω–∞–ø–∏—Å–∞–≤ <code>–æ—Ç–º–µ–Ω–∞</code> –∏–ª–∏ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã.",
            chat_id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode="HTML"
        )
        CARDINAL.telegram.bot.answer_callback_query(call.id, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞")
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ interactive_add_account_start_callback: {e}")
        try:
            CARDINAL.telegram.bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)[:50]}")
        except:
            pass

# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
def cancel_add_account_callback(call=None, *args, **kwargs):
    if args and isinstance(args[0], telebot.types.CallbackQuery):
        call = args[0]
    if not isinstance(call, telebot.types.CallbackQuery):
        return  
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        chat_id = call.message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
        if chat_id in ADD_ACCOUNT_STATES:
            del ADD_ACCOUNT_STATES[chat_id]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("–í –º–µ–Ω—é üíª", callback_data="srent_menu"))
        
        CARDINAL.telegram.bot.edit_message_text(
            "‚ùå <b>–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.",
            chat_id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode="HTML"
        )
        CARDINAL.telegram.bot.answer_callback_query(call.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ cancel_add_account_callback: {e}")
        try:
            CARDINAL.telegram.bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)[:50]}")
        except:
            pass

def handle_account_add_steps(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —à–∞–≥–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
        if chat_id not in ADD_ACCOUNT_STATES:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ
        state = ADD_ACCOUNT_STATES[chat_id]["state"]
        data = ADD_ACCOUNT_STATES[chat_id]["data"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É
        if message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "cancel", "/cancel", "/–æ—Ç–º–µ–Ω–∞"]:
            del ADD_ACCOUNT_STATES[chat_id]
            CARDINAL.telegram.bot.send_message(
                chat_id,
                "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.",
                parse_mode="HTML"
            )
            return
        
        if state == "login":
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏–Ω
            login = message.text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            if login in rental_manager.accounts:
                CARDINAL.telegram.bot.send_message(
                    chat_id,
                    "‚ùå –ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω.\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –Ω–∞–ø–∏—Å–∞–≤ <code>–æ—Ç–º–µ–Ω–∞</code>",
                    parse_mode="HTML"
                )
                return
            
            data["login"] = login
            ADD_ACCOUNT_STATES[chat_id]["state"] = "password"
            
            CARDINAL.telegram.bot.send_message(
                chat_id,
                "‚úÖ –õ–æ–≥–∏–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n"
                "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–ø–∞—Ä–æ–ª—å</b> –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –Ω–∞–ø–∏—Å–∞–≤ <code>–æ—Ç–º–µ–Ω–∞</code>",
                parse_mode="HTML"
            )
        
        elif state == "password":
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å
            password = message.text.strip()
            data["password"] = password
            ADD_ACCOUNT_STATES[chat_id]["state"] = "type"
            
            CARDINAL.telegram.bot.send_message(
                chat_id,
                "‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n"
                "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ <b>—Ç–∏–ø</b> –∞–∫–∫–∞—É–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: standard, games, premium, repo).\n"
                "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ <code>standard</code>, –µ—Å–ª–∏ –Ω–µ—Ç –æ—Å–æ–±–æ–≥–æ —Ç–∏–ø–∞.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –Ω–∞–ø–∏—Å–∞–≤ <code>–æ—Ç–º–µ–Ω–∞</code>",
                parse_mode="HTML"
            )
        
        elif state == "type":
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø
            account_type = message.text.strip().lower()
            data["type"] = account_type
            ADD_ACCOUNT_STATES[chat_id]["state"] = "api_key"
            
            CARDINAL.telegram.bot.send_message(
                chat_id,
                "‚úÖ –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n"
                "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ <b>API –∫–ª—é—á</b> –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–º (—Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–π).\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç API –∫–ª—é—á–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>–Ω–µ—Ç</code> –∏–ª–∏ <code>-</code>.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –Ω–∞–ø–∏—Å–∞–≤ <code>–æ—Ç–º–µ–Ω–∞</code>",
                parse_mode="HTML"
            )
            
        elif state == "api_key":
            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
            api_key = message.text.strip()
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª API –∫–ª—é—á
            if api_key.lower() in ["–Ω–µ—Ç", "-", "no", "none"]:
                api_key = None
            
            data["api_key"] = api_key
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
            success, message_text = rental_manager.add_account(
                data["login"], 
                data["password"], 
                data["type"],
                api_key
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            del ADD_ACCOUNT_STATES[chat_id]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é
            markup = InlineKeyboardMarkup()
            markup.row(InlineKeyboardButton("–í –º–µ–Ω—é üíª", callback_data="srent_menu"))
            markup.row(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∞–∫–∫–∞—É–Ω—Ç ‚úÖ", callback_data="srent_add"))
            
            if success:
                CARDINAL.telegram.bot.send_message(
                    chat_id,
                    f"‚úÖ {message_text}\n\n"
                    f"–õ–æ–≥–∏–Ω: <code>{data['login']}</code>\n"
                    f"–¢–∏–ø: <code>{data['type']}</code>\n"
                    f"API –∫–ª—é—á: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if api_key else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}",
                    reply_markup=markup,
                    parse_mode="HTML"
                )
            else:
                CARDINAL.telegram.bot.send_message(
                    chat_id,
                    f"‚ùå {message_text}",
                    reply_markup=markup,
                    parse_mode="HTML"
                )
    
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_account_add_steps: {e}")
        try:
            CARDINAL.telegram.bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        except:
            pass
        
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if chat_id in ADD_ACCOUNT_STATES:
            del ADD_ACCOUNT_STATES[chat_id]

# –§—É–Ω–∫—Ü–∏–∏ –º–µ–Ω—é –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
def show_menu(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–ª–∞–≥–∏–Ω–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        markup = InlineKeyboardMarkup(row_width=2)
        
        # –°—Ç–∞—Ç—É—Å-—Å–µ–∫—Ü–∏—è
        status_emoji = "‚úÖ" if RUNNING else "‚ùå"
        available_count = sum(1 for acc in rental_manager.accounts.values() if acc.status == "available")
        rented_count = sum(1 for acc in rental_manager.accounts.values() if acc.status == "rented")
        
        # –í–µ—Ä—Ö–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è - —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ
        if RUNNING:
            markup.row(InlineKeyboardButton("üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data="srent_stop"))
        else:
            markup.row(InlineKeyboardButton("üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data="srent_start"))
        
        # –†–∞–∑–¥–µ–ª –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        markup.row(
            InlineKeyboardButton("üïπÔ∏è –ê–∫–∫–∞—É–Ω—Ç—ã", callback_data="srent_accounts"),
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="srent_add")
        )
        
        # –†–∞–∑–¥–µ–ª –ø—Ä–∏–≤—è–∑–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        markup.row(
            InlineKeyboardButton("üõú –ü—Ä–∏–≤—è–∑–∫–∏", callback_data="srent_lot_bindings"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="srent_status")
        )
        
        # –†–∞–∑–¥–µ–ª –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ —à–∞–±–ª–æ–Ω–æ–≤
        markup.row(
            InlineKeyboardButton("üõû –í–æ–∑–≤—Ä–∞—Ç –∞–∫–∫–∞—É–Ω—Ç–∞", callback_data="srent_return"),
            InlineKeyboardButton("‚úèÔ∏è –¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–æ–≤", callback_data="srent_list_templates")
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
        header = "üéÆ –°–∏—Å—Ç–µ–º–∞ –∞—Ä–µ–Ω–¥—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Steam"
        status_line = f"\n–°—Ç–∞—Ç—É—Å: {status_emoji} {'–ê–ö–¢–ò–í–ù–ê' if RUNNING else '–û–°–¢–ê–ù–û–í–õ–ï–ù–ê'}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º
        accounts_text = "\n\nüìù –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º:\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º
        accounts_by_type = {}
        for acc in rental_manager.accounts.values():
            if acc.type not in accounts_by_type:
                accounts_by_type[acc.type] = []
            accounts_by_type[acc.type].append(acc)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º
        for acc_type, accs in accounts_by_type.items():
            accounts_text += f"üîπ {acc_type.upper()} ({len(accs)} —à—Ç.):\n"
            for acc in accs:
                status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if acc.status == "available" else "‚ùå –í –∞—Ä–µ–Ω–¥–µ"
                accounts_text += f"  ‚Ä¢ {acc.login} - {status} \n"
            accounts_text += "\n"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = f"{header}{status_line}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã
        if rental_manager.accounts:
            message_text += accounts_text
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –≤–Ω–∏–∑—É —Å–æ–æ–±—â–µ–Ω–∏—è
        # –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
        markup.row(
            InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å üÜô", callback_data="srent_menu"),
        )
        
        CARDINAL.telegram.bot.send_message(
            message.chat.id,
            message_text,
            reply_markup=markup,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é: {e}")
        try:
            CARDINAL.telegram.bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é: {e}")
        except:
            pass

def show_menu_callback(call=None, *args, **kwargs):
    if args and isinstance(args[0], telebot.types.CallbackQuery):
        call = args[0]
    if not isinstance(call, telebot.types.CallbackQuery):
        return
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        markup = InlineKeyboardMarkup(row_width=2)
        
        # –°—Ç–∞—Ç—É—Å-—Å–µ–∫—Ü–∏—è
        status_emoji = "‚úÖ" if RUNNING else "‚ùå"
        available_count = sum(1 for acc in rental_manager.accounts.values() if acc.status == "available")
        rented_count = sum(1 for acc in rental_manager.accounts.values() if acc.status == "rented")
        
        # –í–µ—Ä—Ö–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è - —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ
        if RUNNING:
            markup.row(InlineKeyboardButton("üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data="srent_stop"))
        else:
            markup.row(InlineKeyboardButton("üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data="srent_start"))
        
        # –†–∞–∑–¥–µ–ª –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        markup.row(
            InlineKeyboardButton("üïπÔ∏è –ê–∫–∫–∞—É–Ω—Ç—ã", callback_data="srent_accounts"),
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="srent_add")
        )
        
        # –†–∞–∑–¥–µ–ª –ø—Ä–∏–≤—è–∑–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        markup.row(
            InlineKeyboardButton("üõú –ü—Ä–∏–≤—è–∑–∫–∏", callback_data="srent_lot_bindings"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="srent_status")
        )
        
        # –†–∞–∑–¥–µ–ª –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ —à–∞–±–ª–æ–Ω–æ–≤
        markup.row(
            InlineKeyboardButton("üõû –í–æ–∑–≤—Ä–∞—Ç –∞–∫–∫–∞—É–Ω—Ç–∞", callback_data="srent_return"),
            InlineKeyboardButton("‚úèÔ∏è –¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–æ–≤", callback_data="srent_list_templates")
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
        header = "üéÆ –°–∏—Å—Ç–µ–º–∞ –∞—Ä–µ–Ω–¥—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Steam"
        status_line = f"\n–°—Ç–∞—Ç—É—Å: {status_emoji} {'–ê–ö–¢–ò–í–ù–ê' if RUNNING else '–û–°–¢–ê–ù–û–í–õ–ï–ù–ê'}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º
        accounts_text = "\n\nüìù –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º:\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º
        accounts_by_type = {}
        for acc in rental_manager.accounts.values():
            if acc.type not in accounts_by_type:
                accounts_by_type[acc.type] = []
            accounts_by_type[acc.type].append(acc)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º
        for acc_type, accs in accounts_by_type.items():
            accounts_text += f"üîπ {acc_type.upper()} ({len(accs)} —à—Ç.):\n"
            for acc in accs:
                status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if acc.status == "available" else "‚ùå –í –∞—Ä–µ–Ω–¥–µ"
                accounts_text += f"  ‚Ä¢ {acc.login} - {status} \n"
            accounts_text += "\n"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = f"{header}{status_line}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã
        if rental_manager.accounts:
            message_text += accounts_text
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –≤–Ω–∏–∑—É —Å–æ–æ–±—â–µ–Ω–∏—è
        markup.row(
            InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å üÜô", callback_data="srent_menu"),
            InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç ‚úÖ", callback_data="srent_add")
        )
        
        try:
            CARDINAL.telegram.bot.edit_message_text(
                message_text,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup,
                parse_mode="HTML"
            )
            CARDINAL.telegram.bot.answer_callback_query(call.id, "–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as edit_error:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if "message is not modified" in str(edit_error):
                CARDINAL.telegram.bot.answer_callback_query(call.id, "–ú–µ–Ω—é –∞–∫—Ç—É–∞–ª—å–Ω–æ")
            else:
                # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                raise edit_error
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é: {e}")
        try:
            CARDINAL.telegram.bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)[:50]}")
        except:
            pass

def start_rental_callback(call=None, *args, **kwargs):
    if args and isinstance(args[0], telebot.types.CallbackQuery):
        call = args[0]
    if not isinstance(call, telebot.types.CallbackQuery):
        return    
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    global RUNNING
    try:
        if RUNNING:
            CARDINAL.telegram.bot.answer_callback_query(call.id, "–°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
            return
            
        RUNNING = True
        logger.info(f"{LOGGER_PREFIX} –°–∏—Å—Ç–µ–º–∞ –∞—Ä–µ–Ω–¥—ã –∑–∞–ø—É—â–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="srent_menu"))
        
        CARDINAL.telegram.bot.edit_message_text(
            "‚úÖ <b>–°–∏—Å—Ç–µ–º–∞ –∞—Ä–µ–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ª–æ—Ç–æ–≤.",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode="HTML"
        )
        CARDINAL.telegram.bot.answer_callback_query(call.id, "–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞—Ä–µ–Ω–¥—ã: {e}")
        try:
            CARDINAL.telegram.bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)[:50]}")
        except:
            pass

def stop_rental_callback(call=None, *args, **kwargs):
    if args and isinstance(args[0], telebot.types.CallbackQuery):
        call = args[0]
    if not isinstance(call, telebot.types.CallbackQuery):
        return    
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    global RUNNING
    try:
        if not RUNNING:
            CARDINAL.telegram.bot.answer_callback_query(call.id, "–°–∏—Å—Ç–µ–º–∞ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
            return
            
        RUNNING = False
        logger.info(f"{LOGGER_PREFIX} –°–∏—Å—Ç–µ–º–∞ –∞—Ä–µ–Ω–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—é
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="srent_menu"))
        
        CARDINAL.telegram.bot.edit_message_text(
            "üõë <b>–°–∏—Å—Ç–µ–º–∞ –∞—Ä–µ–Ω–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ª–æ—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞.\n"
            "–ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode="HTML"
        )
        CARDINAL.telegram.bot.answer_callback_query(call.id, "–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∞—Ä–µ–Ω–¥—ã: {e}")
        try:
            CARDINAL.telegram.bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)[:50]}")
        except:
            pass

def show_status_callback(call=None, *args, **kwargs):
    if args and isinstance(args[0], telebot.types.CallbackQuery):
        call = args[0]
    if not isinstance(call, telebot.types.CallbackQuery):
        return
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∞—Ä–µ–Ω–¥—ã"""
    try:
        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_accounts = len(rental_manager.accounts)
        available_accounts = sum(1 for acc in rental_manager.accounts.values() if acc.status == 'available')
        rented_accounts = sum(1 for acc in rental_manager.accounts.values() if acc.status == 'rented')
        disabled_accounts = sum(1 for acc in rental_manager.accounts.values() if acc.status == 'disabled')
        
        active_rentals = sum(1 for rent in rental_manager.rentals.values() if rent.is_active)
        total_rentals = len(rental_manager.rentals)
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        status_emoji = "üü¢" if RUNNING else "üî¥"
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        status_text = "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´</b> üìä\n\n"
        status_text += f"{'='*30}\n\n"
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        status_text += f"<b>–°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:</b> {status_emoji} <b>{'–ê–ö–¢–ò–í–ù–ê' if RUNNING else '–û–°–¢–ê–ù–û–í–õ–ï–ù–ê'}</b>\n\n"
        status_text += f"{'='*30}\n\n"
        
        # –°–µ–∫—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        status_text += "üñ•Ô∏è <b>–ê–ö–ö–ê–£–ù–¢–´</b>\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –≤–∏–¥–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
        if total_accounts > 0:
            available_percent = int((available_accounts / total_accounts) * 10)
            rented_percent = int((rented_accounts / total_accounts) * 10)
            disabled_percent = max(0, 10 - available_percent - rented_percent)
            
            progress_bar = "üü¢" * available_percent + "üî¥" * rented_percent + "‚ö´" * disabled_percent
            status_text += f"{progress_bar}\n\n"
        
        status_text += f"‚Ä¢ <b>–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b> {total_accounts}\n"
        status_text += f"‚Ä¢ <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> {available_accounts} ({int(available_accounts/total_accounts*100) if total_accounts else 0}%)\n"
        status_text += f"‚Ä¢ <b>–í –∞—Ä–µ–Ω–¥–µ:</b> {rented_accounts} ({int(rented_accounts/total_accounts*100) if total_accounts else 0}%)\n"
        status_text += f"‚Ä¢ <b>–û—Ç–∫–ª—é—á–µ–Ω–æ:</b> {disabled_accounts} ({int(disabled_accounts/total_accounts*100) if total_accounts else 0}%)\n\n"
        
        # –°–µ–∫—Ü–∏—è —Ç–∏–ø–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        if total_accounts > 0:
            status_text += "<b>üìã –ü–û –¢–ò–ü–ê–ú</b>\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º
            accounts_by_type = {}
            for acc in rental_manager.accounts.values():
                if acc.type not in accounts_by_type:
                    accounts_by_type[acc.type] = {"total": 0, "available": 0, "rented": 0}
                
                accounts_by_type[acc.type]["total"] += 1
                if acc.status == "available":
                    accounts_by_type[acc.type]["available"] += 1
                elif acc.status == "rented":
                    accounts_by_type[acc.type]["rented"] += 1
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∏–ø—É
            for acc_type, stats in accounts_by_type.items():
                status_text += f"‚Ä¢ <b>{acc_type.upper()}</b>: {stats['total']} —à—Ç. "
                status_text += f"(üü¢ {stats['available']} | üî¥ {stats['rented']})\n"
            
            status_text += "\n"
        
        status_text += f"{'='*30}\n\n"
        
        # –°–µ–∫—Ü–∏—è –∞—Ä–µ–Ω–¥
        status_text += "‚è∞ <b>–ê–†–ï–ù–î–´</b>\n\n"
        status_text += f"‚Ä¢ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥:</b> {active_rentals}\n"
        status_text += f"‚Ä¢ <b>–í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ:</b> {total_rentals}\n"
        status_text += f"‚Ä¢ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</b> {total_rentals - active_rentals}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–∏–∂–∞–π—à–∏—Ö –∏—Å—Ç–µ—á–µ–Ω–∏—è—Ö —Å—Ä–æ–∫–∞ –∞—Ä–µ–Ω–¥—ã, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã
        if active_rentals > 0:
            status_text += "<b>üîÑ –ë–õ–ò–ñ–ê–ô–®–ò–ï –ò–°–¢–ï–ß–ï–ù–ò–Ø</b>\n\n"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞—Ä–µ–Ω–¥—ã –ø–æ –æ—Å—Ç–∞–≤—à–µ–º—É—Å—è –≤—Ä–µ–º–µ–Ω–∏
            active_rental_objects = [r for r in rental_manager.rentals.values() if r.is_active]
            active_rental_objects.sort(key=lambda r: r.end_time)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 3 –±–ª–∏–∂–∞–π—à–∏—Ö –∏—Å—Ç–µ—á–µ–Ω–∏–π
            for i, rental in enumerate(active_rental_objects[:3]):
                account_login = rental.account_login if hasattr(rental, 'account_login') else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                remaining_time = rental.get_remaining_time()
                hours, remainder = divmod(remaining_time.seconds, 3600)
                minutes, _ = divmod(remainder, 60)
                
                time_warning = "‚ö†Ô∏è " if hours == 0 and minutes < 30 else ""
                
                status_text += f"{time_warning}<b>{rental.username}</b>: {account_login}\n"
                status_text += f"‚è± –û—Å—Ç–∞–ª–æ—Å—å: <b>{hours} —á. {minutes} –º–∏–Ω.</b>\n\n"
        
        status_text += f"{'='*30}\n\n"
        
        # –°–µ–∫—Ü–∏—è –ø—Ä–∏–≤—è–∑–æ–∫
        status_text += "üîó <b>–ü–†–ò–í–Ø–ó–ö–ò</b>\n\n"
        status_text += f"‚Ä¢ <b>–í—Å–µ–≥–æ –ø—Ä–∏–≤—è–∑–æ–∫:</b> {len(lot_bindings)}\n\n"
        
        if len(lot_bindings) > 0:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ —Ç–∏–ø–∞–º
            bindings_by_type = {}
            for binding in lot_bindings.values():
                bind_type = binding.get("account_type", "unknown")
                if bind_type not in bindings_by_type:
                    bindings_by_type[bind_type] = 0
                bindings_by_type[bind_type] += 1
            
            # –í—ã–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≤—è–∑–æ–∫ –ø–æ —Ç–∏–ø–∞–º
            for bind_type, count in bindings_by_type.items():
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
                avail_accounts = sum(1 for acc in rental_manager.accounts.values() 
                                 if acc.type == bind_type and acc.status == "available")
                status_emoji = "üü¢" if avail_accounts > 0 else "üî¥"
                
                status_text += f"‚Ä¢ {status_emoji} <b>{bind_type.upper()}</b>: {count} –ø—Ä–∏–≤—è–∑–æ–∫\n"
        
        status_text += f"{'='*30}\n"
        
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("‚¨ÖÔ∏è –ù–ê–ó–ê–î", callback_data="srent_menu"))
        markup.row(InlineKeyboardButton("üîÑ –û–ë–ù–û–í–ò–¢–¨", callback_data="srent_status"))
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if RUNNING:
            markup.row(InlineKeyboardButton("‚õî –û–°–¢–ê–ù–û–í–ò–¢–¨", callback_data="srent_stop"))
        else:
            markup.row(InlineKeyboardButton("‚ñ∂Ô∏è –ó–ê–ü–£–°–¢–ò–¢–¨", callback_data="srent_start"))
        
        try:
            CARDINAL.telegram.bot.edit_message_text(
                status_text,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup,
                parse_mode="HTML"
            )
            CARDINAL.telegram.bot.answer_callback_query(call.id, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as edit_error:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º callback_query
            if "message is not modified" in str(edit_error):
                CARDINAL.telegram.bot.answer_callback_query(call.id, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞")
            else:
                # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                raise edit_error
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        try:
            CARDINAL.telegram.bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)[:50]}")
        except:
            pass

def show_accounts_callback(call=None, *args, **kwargs):
    if args and isinstance(args[0], telebot.types.CallbackQuery):
        call = args[0]
    if not isinstance(call, telebot.types.CallbackQuery):
        return
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        if not rental_manager.accounts:
            markup = InlineKeyboardMarkup()
            markup.row(InlineKeyboardButton("‚¨ÖÔ∏è –ù–ê–ó–ê–î", callback_data="srent_menu"))
            markup.row(InlineKeyboardButton("‚ûï –î–û–ë–ê–í–ò–¢–¨ –ê–ö–ö–ê–£–ù–¢", callback_data="srent_add"))
            
            CARDINAL.telegram.bot.edit_message_text(
                "üñ•Ô∏è <b>–ê–ö–ö–ê–£–ù–¢–´ STEAM</b>\n\n"
                f"{'='*30}\n\n"
                "‚ö†Ô∏è –í —Å–∏—Å—Ç–µ–º–µ –µ—â–µ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç.\n\n"
                f"{'='*30}",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup,
                parse_mode="HTML"
            )
            CARDINAL.telegram.bot.answer_callback_query(call.id, "–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º
        accounts_by_type = {}
        for login, account in rental_manager.accounts.items():
            acc_type = account.type
            if acc_type not in accounts_by_type:
                accounts_by_type[acc_type] = []
            accounts_by_type[acc_type].append(account)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º
        accounts_text = "üñ•Ô∏è <b>–ê–ö–ö–ê–£–ù–¢–´ STEAM</b> üñ•Ô∏è\n\n"
        accounts_text += f"{'='*30}\n\n"
        
        total = len(rental_manager.accounts)
        available = sum(1 for acc in rental_manager.accounts.values() if acc.status == "available")
        rented = sum(1 for acc in rental_manager.accounts.values() if acc.status == "rented")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        accounts_text += "<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
        accounts_text += f"üî∏ –í—Å–µ–≥–æ: <b>{total}</b>\n"
        accounts_text += f"üî∏ –î–æ—Å—Ç—É–ø–Ω–æ: <b>{available}</b> üü¢\n"
        accounts_text += f"üî∏ –í –∞—Ä–µ–Ω–¥–µ: <b>{rented}</b> üî¥\n\n"
        accounts_text += f"{'='*30}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª—ã –ø–æ —Ç–∏–ø–∞–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        for acc_type, accounts in accounts_by_type.items():
            accounts_text += f"<b>üìÅ –¢–ò–ü: {acc_type.upper()}</b>\n\n"
            
            available_in_type = sum(1 for acc in accounts if acc.status == "available")
            rented_in_type = sum(1 for acc in accounts if acc.status == "rented")
            
            accounts_text += f"<b>–í—Å–µ–≥–æ:</b> {len(accounts)} | <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> {available_in_type} | <b>–í –∞—Ä–µ–Ω–¥–µ:</b> {rented_in_type}\n\n"
            
            for account in accounts:
                status_emoji = "üü¢" if account.status == "available" else "üî¥" if account.status == "rented" else "‚ö´"
                accounts_text += f"{status_emoji} <b>{account.login}</b>\n"
                
                # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –≤ –∞—Ä–µ–Ω–¥–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä–µ–Ω–¥–µ
                if account.status == "rented" and account.rental_id in rental_manager.rentals:
                    rental = rental_manager.rentals[account.rental_id]
                    remaining_time = rental.get_remaining_time()
                    hours, remainder = divmod(remaining_time.seconds, 3600)
                    minutes, _ = divmod(remainder, 60)
                    accounts_text += f"  üë§ <b>{rental.username}</b>\n"
                    accounts_text += f"  ‚è± –û—Å—Ç–∞–ª–æ—Å—å: <b>{hours} —á. {minutes} –º–∏–Ω.</b>\n"
                    accounts_text += f"  üîÑ <code>/srent_force {account.login}</code>\n"
            
            accounts_text += f"\n{'-'*20}\n\n"
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
        if len(accounts_text) > 3500:
            accounts_text = accounts_text[:3500] + "...\n\n‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –ø–æ–∫–∞–∑–∞–Ω—ã –Ω–µ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã"
        
        accounts_text += f"{'='*30}\n\n"
        accounts_text += "<b>–ö–û–ú–ê–ù–î–´:</b>\n"
        accounts_text += "‚Ä¢ <code>/srent_del –õ–û–ì–ò–ù</code> - —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n"
        accounts_text += "‚Ä¢ <code>/srent_force –õ–û–ì–ò–ù</code> - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç"
        
        markup = InlineKeyboardMarkup(row_width=2)
        markup.row(InlineKeyboardButton("‚¨ÖÔ∏è –ù–ê–ó–ê–î", callback_data="srent_menu"))
        markup.row(
            InlineKeyboardButton("‚ûï –î–û–ë–ê–í–ò–¢–¨", callback_data="srent_add"),
            InlineKeyboardButton("üîÑ –í–û–ó–í–†–ê–¢", callback_data="srent_return")
        )
        
        CARDINAL.telegram.bot.edit_message_text(
            accounts_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode="HTML"
        )
        CARDINAL.telegram.bot.answer_callback_query(call.id, "–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        try:
            CARDINAL.telegram.bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)[:50]}")
        except:
            pass

def show_rentals_callback(call=None, *args, **kwargs):
    if args and isinstance(args[0], telebot.types.CallbackQuery):
        call = args[0]
    if not isinstance(call, telebot.types.CallbackQuery):
        return
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥"""
    try:
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã
        active_rentals = [rental for rental in rental_manager.rentals.values() if rental.is_active]
        
        if not active_rentals:
            markup = InlineKeyboardMarkup()
            markup.row(InlineKeyboardButton("‚¨ÖÔ∏è –ù–ê–ó–ê–î", callback_data="srent_menu"))
            
            CARDINAL.telegram.bot.edit_message_text(
                "‚è∞ <b>–ê–ö–¢–ò–í–ù–´–ï –ê–†–ï–ù–î–´</b> ‚è∞\n\n"
                f"{'='*30}\n\n"
                "üìå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥.\n\n"
                f"{'='*30}",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup,
                parse_mode="HTML"
            )
            CARDINAL.telegram.bot.answer_callback_query(call.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞—Ä–µ–Ω–¥—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–±–ª–∏–∂–∞–π—à–∏–µ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –≤ –Ω–∞—á–∞–ª–µ)
        active_rentals.sort(key=lambda rental: rental.expires_at)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞—Ä–µ–Ω–¥–∞—Ö
        rentals_text = "‚è∞ <b>–ê–ö–¢–ò–í–ù–´–ï –ê–†–ï–ù–î–´</b> ‚è∞\n\n"
        rentals_text += f"{'='*30}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        rentals_text += f"<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
        rentals_text += f"üî∏ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: <b>{len(active_rentals)}</b>\n"
        rentals_text += f"üî∏ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ä–∞–Ω–µ–µ: <b>{len(rental_manager.rentals) - len(active_rentals)}</b>\n\n"
        rentals_text += f"{'='*30}\n\n"
        
        now = datetime.now()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞—Ä–µ–Ω–¥—ã –ø–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º
        rentals_by_user = {}
        for rental in active_rentals:
            if rental.username not in rentals_by_user:
                rentals_by_user[rental.username] = []
            rentals_by_user[rental.username].append(rental)
        
        # –í—ã–≤–æ–¥–∏–º –∞—Ä–µ–Ω–¥—ã, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        rentals_text += "<b>üìã –°–ü–ò–°–û–ö –ê–†–ï–ù–î</b>\n\n"
        
        for username, user_rentals in rentals_by_user.items():
            rentals_text += f"<b>üë§ {username}</b>\n"
            for rental in user_rentals:
                # –ù–∞—Ö–æ–¥–∏–º –∞–∫–∫–∞—É–Ω—Ç –ø–æ rental_id
                account = None
                for acc in rental_manager.accounts.values():
                    if acc.rental_id == rental.id:
                        account = acc
                        break
                
                remaining_time = rental.get_remaining_time()
                hours, remainder = divmod(remaining_time.seconds, 3600)
                minutes, _ = divmod(remainder, 60)
                
                # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏ (–º–µ–Ω–µ–µ 30 –º–∏–Ω—É—Ç), –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                time_warning = "‚ö†Ô∏è " if hours == 0 and minutes < 30 else ""
                
                rentals_text += f"  {time_warning}üîë <b>{account.login if account else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</b>\n"
                rentals_text += f"  ‚è± <b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {hours} —á. {minutes} –º–∏–Ω.\n"
                rentals_text += f"  üí∞ <b>–¢–∏–ø:</b> {account.type if account else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                rentals_text += f"  üîÑ <code>/srent_force {account.login if account else '?'}</code>\n\n"
            
            rentals_text += f"{'-'*20}\n\n"
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
        if len(rentals_text) > 3900:
            rentals_text = rentals_text[:3900] + "...\n\n‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –ø–æ–∫–∞–∑–∞–Ω—ã –Ω–µ –≤—Å–µ –∞—Ä–µ–Ω–¥—ã"
        
        rentals_text += f"{'='*30}\n\n"
        rentals_text += "<b>–£–ü–†–ê–í–õ–ï–ù–ò–ï:</b> <code>/srent_force –õ–û–ì–ò–ù</code> - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç"
        
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("‚¨ÖÔ∏è –ù–ê–ó–ê–î", callback_data="srent_menu"))
        markup.row(InlineKeyboardButton("üîÑ –û–ë–ù–û–í–ò–¢–¨", callback_data="srent_rentals"))
        
        CARDINAL.telegram.bot.edit_message_text(
            rentals_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode="HTML"
        )
        CARDINAL.telegram.bot.answer_callback_query(call.id, "–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥")
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞—Ä–µ–Ω–¥: {e}")
        try:
            CARDINAL.telegram.bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)[:50]}")
        except:
            pass

def show_return_account_callback(call=None, *args, **kwargs):
    if args and isinstance(args[0], telebot.types.CallbackQuery):
        call = args[0]
    if not isinstance(call, telebot.types.CallbackQuery):
        return
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    try:
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        rented_accounts = {login: account for login, account in rental_manager.accounts.items() if account.status == "rented"}
        
        if not rented_accounts:
            markup = InlineKeyboardMarkup()
            markup.row(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="srent_menu"))
            
            CARDINAL.telegram.bot.edit_message_text(
                "üîÑ <b>–í–æ–∑–≤—Ä–∞—Ç –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n"
                "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup,
                parse_mode="HTML"
            )
            CARDINAL.telegram.bot.answer_callback_query(call.id, "–ù–µ—Ç –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        markup = InlineKeyboardMarkup()
        for login in rented_accounts:
            markup.row(InlineKeyboardButton(f"üîÑ {login}", callback_data=f"srent_force_return_{login}"))
        markup.row(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="srent_menu"))
        
        CARDINAL.telegram.bot.edit_message_text(
            "üîÑ <b>–í–æ–∑–≤—Ä–∞—Ç –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –∞—Ä–µ–Ω–¥—ã.\n\n"
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω –ø–∞—Ä–æ–ª—å –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ —Ç–µ–∫—É—â–∏–µ —Å–µ—Å—Å–∏–∏ –±—É–¥—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω—ã.",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode="HTML"
        )
        CARDINAL.telegram.bot.answer_callback_query(call.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞")
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –≤–æ–∑–≤—Ä–∞—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        try:
            CARDINAL.telegram.bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)[:50]}")
        except:
            pass

def force_return_account_from_callback(call=None, login=None, *args, **kwargs):
    if args and isinstance(args[0], telebot.types.CallbackQuery):
        call = args[0]
    if not isinstance(call, telebot.types.CallbackQuery):
        return
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –∞—Ä–µ–Ω–¥—ã –ø–æ callback"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
        if login not in rental_manager.accounts:
            CARDINAL.telegram.bot.answer_callback_query(call.id, "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        account = rental_manager.accounts[login]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
        if account.status != "rented" or not account.rental_id:
            CARDINAL.telegram.bot.answer_callback_query(call.id, "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω!")
            return
            
        # –ù–∞—Ö–æ–¥–∏–º –∞—Ä–µ–Ω–¥—É
        rental = rental_manager.rentals.get(account.rental_id)
        if not rental:
            CARDINAL.telegram.bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
            
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username = rental.username
        user_id = rental.user_id
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        success, message, new_password = rental_manager.return_account(account.rental_id)
        
        if not success:
            CARDINAL.telegram.bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {message}")
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="srent_menu"))
        
        CARDINAL.telegram.bot.edit_message_text(
            "‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω</b>\n\n"
            f"üéÆ –õ–æ–≥–∏–Ω: {login}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
            f"‚úÖ –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'available'\n"
            f"‚úÖ –ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <code>{new_password}</code>\n"
            "‚úÖ –¢–µ–∫—É—â–∏–µ —Å–µ—Å—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode="HTML"
        )
        CARDINAL.telegram.bot.answer_callback_query(call.id, "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é FunPay –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã
        try:
            message = format_message("rental_force_end", 
                login=login,
                username=username
            )
            
            if hasattr(CARDINAL, 'account') and hasattr(CARDINAL.account, 'send_message'):
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
                chat_id = f"users-{user_id}-{CARDINAL.account.id}"
                interlocutor_id = user_id
                chat_name = f"–ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å {username}"
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                CARDINAL.account.send_message(chat_id, message, chat_name, interlocutor_id, None, True, False, False)
                logger.info(f"{LOGGER_PREFIX} –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                logger.warning(f"{LOGGER_PREFIX} –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã: {e}")
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        try:
            CARDINAL.telegram.bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)[:50]}")
        except:
            pass

def show_lot_bindings_callback(call=None, *args, **kwargs):
    if args and isinstance(args[0], telebot.types.CallbackQuery):
        call = args[0]
    if not isinstance(call, telebot.types.CallbackQuery):
        return
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—è–∑–æ–∫ –ª–æ—Ç–æ–≤"""
    try:
        if not lot_bindings:
            markup = InlineKeyboardMarkup()
            markup.row(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="srent_menu"))
            markup.row(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –ª–æ—Ç–∞", callback_data="srent_add_binding"))
            
            CARDINAL.telegram.bot.edit_message_text(
                "üîó –ü–†–ò–í–Ø–ó–ö–ò –õ–û–¢–û–í\n\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–æ–∫ –ª–æ—Ç–æ–≤.\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏.\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup,
                parse_mode="HTML"
            )
            CARDINAL.telegram.bot.answer_callback_query(call.id, "–ù–µ—Ç –ø—Ä–∏–≤—è–∑–æ–∫ –ª–æ—Ç–æ–≤")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ —Ç–∏–ø—É –∞–∫–∫–∞—É–Ω—Ç–∞
        sorted_bindings = sorted(lot_bindings.items(), key=lambda x: (x[1]["account_type"], x[1]["duration_hours"]))
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ —Ç–∏–ø—É –∞–∫–∫–∞—É–Ω—Ç–∞
        bindings_by_type = {}
        for lot_name, binding in sorted_bindings:
            acc_type = binding["account_type"]
            if acc_type not in bindings_by_type:
                bindings_by_type[acc_type] = []
            bindings_by_type[acc_type].append((lot_name, binding))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—è–∑–æ–∫
        bindings_text = "üîó –ü–†–ò–í–Ø–ó–ö–ò –õ–û–¢–û–í\n\n"
        bindings_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        bindings_text += f"–í—Å–µ–≥–æ –ø—Ä–∏–≤—è–∑–æ–∫: {len(lot_bindings)}\n"
        bindings_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–∏–≤—è–∑–∫–∏
        markup = InlineKeyboardMarkup(row_width=1)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ –±–æ–ª–µ–µ 10 –ø—Ä–∏–≤—è–∑–æ–∫, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç Telegram
        binding_count = 0
        shown_types = []
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ö–µ—à–µ–π —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ª–æ—Ç–æ–≤
        binding_hashes = {}
        
        for acc_type, bindings in bindings_by_type.items():
            if binding_count >= 10:
                break
                
            bindings_text += f"üìã –¢–ò–ü: {acc_type.upper()}\n\n"
            shown_types.append(acc_type)
            
            for lot_name, binding in bindings[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 3 –ø—Ä–∏–≤—è–∑–æ–∫ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
                if binding_count >= 10:
                    break
                    
                # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–æ—Ç–æ–≤
                display_name = lot_name
                if len(display_name) > 40:
                    display_name = display_name[:37] + "..."
                
                bindings_text += f"‚è± {binding['duration_hours']} —á. | üíú {display_name}\n"
                
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π —Ö–µ—à –¥–ª—è –ª–æ—Ç–∞
                lot_hash = str(abs(hash(lot_name)) % 1000000)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
                binding_hashes[lot_hash] = lot_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ö–µ—à–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∏–º–µ–Ω–∏
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —ç—Ç–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ —Å –∫–æ—Ä–æ—Ç–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
                markup.row(InlineKeyboardButton(f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {display_name[:20]}...", callback_data=f"srent_binding_{lot_hash}"))
                
                binding_count += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Ö–µ—à–µ–π –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
        global binding_hash_map
        binding_hash_map = binding_hashes
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∞–º–∏
        bindings_text += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        bindings_text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
        
        # –ï—Å–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –Ω–µ –≤—Å–µ —Ç–∏–ø—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ"
        if len(shown_types) < len(bindings_by_type):
            markup.row(InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–∏–≤—è–∑–∫–∏ üìã", callback_data="srent_all_bindings"))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–æ–∫
        markup.row(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –ª–æ—Ç–∞", callback_data="srent_add_binding"))
        markup.row(InlineKeyboardButton("–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø—Ä–∏–≤—è–∑–∫–∞–º", callback_data="srent_binding_help"))
        markup.row(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="srent_menu"))
        markup.row(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="srent_lot_bindings"))
        
        try:
            CARDINAL.telegram.bot.edit_message_text(
                bindings_text,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup,
                parse_mode="HTML"
            )
        except Exception as edit_error:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º callback_query
            if "message is not modified" in str(edit_error):
                CARDINAL.telegram.bot.answer_callback_query(call.id, "–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—è–∑–æ–∫ –∞–∫—Ç—É–∞–ª–µ–Ω")
            else:
                # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                raise edit_error
                
        CARDINAL.telegram.bot.answer_callback_query(call.id, "–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—è–∑–æ–∫ –ª–æ—Ç–æ–≤")
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–æ–∫ –ª–æ—Ç–æ–≤: {e}")
        try:
            CARDINAL.telegram.bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)[:50]}")
        except:
            pass

def delete_account_callback(call=None, login=None, *args, **kwargs):
    if args and isinstance(args[0], telebot.types.CallbackQuery):
        call = args[0]
    if not isinstance(call, telebot.types.CallbackQuery):
        return
    """–£–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ callback"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
        if login not in rental_manager.accounts:
            CARDINAL.telegram.bot.answer_callback_query(call.id, "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        account = rental_manager.accounts[login]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
        if account.status == "rented":
            CARDINAL.telegram.bot.answer_callback_query(call.id, "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç!")
            return
            
        # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
        success, message = rental_manager.remove_account(login)
        
        if not success:
            CARDINAL.telegram.bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {message}")
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –∫ –∞–∫–∫–∞—É–Ω—Ç–∞–º", callback_data="srent_accounts"))
        markup.row(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="srent_menu"))
        
        CARDINAL.telegram.bot.edit_message_text(
            "‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>\n\n"
            f"üéÆ –õ–æ–≥–∏–Ω: {login}\n"
            f"üî∞ –¢–∏–ø: {account.type}",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode="HTML"
        )
        CARDINAL.telegram.bot.answer_callback_query(call.id, "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        try:
            CARDINAL.telegram.bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)[:50]}")
        except:
            pass

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –∞—Ä–µ–Ω–¥—ã
def start_rental_system(message):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –∞—Ä–µ–Ω–¥—ã"""
    global RUNNING
    if RUNNING:
        CARDINAL.telegram.bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∞—Ä–µ–Ω–¥—ã —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞."
        )
        return
        
    RUNNING = True
    logger.info(f"{LOGGER_PREFIX} –°–∏—Å—Ç–µ–º–∞ –∞—Ä–µ–Ω–¥—ã –∑–∞–ø—É—â–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É")
    
    CARDINAL.telegram.bot.send_message(
        message.chat.id,
        "‚úÖ <b>–°–∏—Å—Ç–µ–º–∞ –∞—Ä–µ–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ª–æ—Ç–æ–≤.",
        parse_mode="HTML"
    )

def stop_rental_system(message):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –∞—Ä–µ–Ω–¥—ã"""
    global RUNNING
    if not RUNNING:
        CARDINAL.telegram.bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∞—Ä–µ–Ω–¥—ã —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."
        )
        return
        
    RUNNING = False
    logger.info(f"{LOGGER_PREFIX} –°–∏—Å—Ç–µ–º–∞ –∞—Ä–µ–Ω–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É")
    
    CARDINAL.telegram.bot.send_message(
        message.chat.id,
        "üõë <b>–°–∏—Å—Ç–µ–º–∞ –∞—Ä–µ–Ω–¥—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
        "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ª–æ—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞.\n"
        "–ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
        parse_mode="HTML"
    )

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
def add_account_cmd(message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    try:
        text = message.text.strip()
        
        # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ –Ω–∞—á–∞–ª–∞
        if text.startswith('/srent_add'):
            text = text[len('/srent_add'):].strip()
        
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ñ–æ—Ä–º–∞—Ç: –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å [—Ç–∏–ø]
        params = text.split()
        
        if len(params) < 2:
            CARDINAL.telegram.bot.send_message(
                message.chat.id, 
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/srent_add –õ–û–ì–ò–ù –ü–ê–†–û–õ–¨ [–¢–ò–ü]</code>\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/srent_add steamuser123 password123 pubg</code>\n"
                "–ï—Å–ª–∏ —Ç–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω 'standard'.",
                parse_mode="HTML"
            )
            return
        
        login = params[0]
        password = params[1]
        account_type = "standard"
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
        if len(params) > 2:
            account_type = params[2]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
        success, message_text = rental_manager.add_account(login, password, account_type)
        
        if success:
            CARDINAL.telegram.bot.send_message(
                message.chat.id,
                f"‚úÖ {message_text}\n\n"
                f"–õ–æ–≥–∏–Ω: <code>{login}</code>\n"
                f"–¢–∏–ø: <code>{account_type}</code>",
                parse_mode="HTML"
            )
        else:
            CARDINAL.telegram.bot.send_message(
                message.chat.id,
                f"‚ùå {message_text}",
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ add_account_cmd: {e}")
        try:
            CARDINAL.telegram.bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        except:
            pass

def list_accounts_cmd(message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    try:
        if not rental_manager.accounts:
            CARDINAL.telegram.bot.send_message(
                message.chat.id,
                "‚ÑπÔ∏è –í —Å–∏—Å—Ç–µ–º–µ –µ—â–µ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n\n"
                "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/srent_add</code> –∏–ª–∏ <code>/steam_add</code>",
                parse_mode="HTML"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        accounts_text = ""
        for login, account in rental_manager.accounts.items():
            status_emoji = "üü¢" if account.status == "available" else "üî¥" if account.status == "rented" else "‚ö´"
            accounts_text += f"{status_emoji} <b>{login}</b> ({account.type})\n"
            accounts_text += f"   –°—Ç–∞—Ç—É—Å: {account.status}\n"
            
            # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –≤ –∞—Ä–µ–Ω–¥–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä–µ–Ω–¥–µ
            if account.status == "rented" and account.rental_id in rental_manager.rentals:
                rental = rental_manager.rentals[account.rental_id]
                remaining_time = rental.get_remaining_time()
                hours, remainder = divmod(remaining_time.seconds, 3600)
                minutes, _ = divmod(remainder, 60)
                accounts_text += f"   –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä: {rental.username}\n"
                accounts_text += f"   –û—Å—Ç–∞–ª–æ—Å—å: {hours} —á. {minutes} –º–∏–Ω.\n"
                accounts_text += f"   [<code>/srent_force {login}</code>]\n"
            
            accounts_text += f"   [<code>/srent_del {login}</code>]\n\n"
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
        if len(accounts_text) > 3500:
            accounts_text = accounts_text[:3500] + "...\n\n(–°–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –ø–æ–∫–∞–∑–∞–Ω—ã –Ω–µ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã)"
        
        CARDINAL.telegram.bot.send_message(
            message.chat.id,
            "üéÆ <b>–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>\n\n" + accounts_text,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ list_accounts_cmd: {e}")
        try:
            CARDINAL.telegram.bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        except:
            pass

def list_rentals_cmd(message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥"""
    try:
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã
        active_rentals = [rental for rental in rental_manager.rentals.values() if rental.is_active]
        
        if not active_rentals:
            CARDINAL.telegram.bot.send_message(
                message.chat.id,
                "‚ÑπÔ∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥.",
                parse_mode="HTML"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥
        rentals_text = ""
        for rental in active_rentals:
            account = None
            if rental.account_login in rental_manager.accounts:
                account = rental_manager.accounts[rental.account_login]
            
            remaining_time = rental.get_remaining_time()
            hours, remainder = divmod(remaining_time.seconds, 3600)
            minutes, _ = divmod(remainder, 60)
            
            rentals_text += f"üë§ <b>{rental.username}</b>\n"
            rentals_text += f"üéÆ –ê–∫–∫–∞—É–Ω—Ç: {rental.account_login}\n"
            if account:
                rentals_text += f"üî∞ –¢–∏–ø: {account.type}\n"
            rentals_text += f"‚è± –°—Ä–æ–∫: {rental.duration_hours} —á.\n"
            rentals_text += f"‚åõ –û—Å—Ç–∞–ª–æ—Å—å: {hours} —á. {minutes} –º–∏–Ω.\n"
            rentals_text += f"üÜî ID –∑–∞–∫–∞–∑–∞: {rental.order_id or 'N/A'}\n"
            rentals_text += f"[<code>/srent_force {rental.account_login}</code>]\n\n"
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
        if len(rentals_text) > 3500:
            rentals_text = rentals_text[:3500] + "...\n\n(–°–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –ø–æ–∫–∞–∑–∞–Ω—ã –Ω–µ –≤—Å–µ –∞—Ä–µ–Ω–¥—ã)"
        
        CARDINAL.telegram.bot.send_message(
            message.chat.id,
            "‚è≥ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã</b>\n\n" + rentals_text,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ list_rentals_cmd: {e}")
        try:
            CARDINAL.telegram.bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        except:
            pass

def force_return_account_cmd(message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –∞—Ä–µ–Ω–¥—ã"""
    try:
        text = message.text.strip()
        
        # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ –Ω–∞—á–∞–ª–∞
        if text.startswith('/srent_force'):
            text = text[len('/srent_force'):].strip()
        
        if not text:
            CARDINAL.telegram.bot.send_message(
                message.chat.id, 
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/srent_force –õ–û–ì–ò–ù</code>\n\n"
                "–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π <code>/steam_active</code>",
                parse_mode="HTML"
            )
            return
        
        login = text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
        if login not in rental_manager.accounts:
            CARDINAL.telegram.bot.send_message(
                message.chat.id,
                "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                parse_mode="HTML"
            )
            return
            
        account = rental_manager.accounts[login]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
        if account.status != "rented" or not account.rental_id:
            CARDINAL.telegram.bot.send_message(
                message.chat.id,
                "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω.",
                parse_mode="HTML"
            )
            return
            
        # –ù–∞—Ö–æ–¥–∏–º –∞—Ä–µ–Ω–¥—É
        rental = rental_manager.rentals.get(account.rental_id)
        if not rental:
            CARDINAL.telegram.bot.send_message(
                message.chat.id,
                "‚ùå –î–∞–Ω–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                parse_mode="HTML"
            )
            return
            
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username = rental.username
        user_id = rental.user_id
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        success, message_text, new_password = rental_manager.return_account(account.rental_id)
        
        if not success:
            CARDINAL.telegram.bot.send_message(
                message.chat.id,
                f"‚ùå {message_text}",
                parse_mode="HTML"
            )
            return
            
        CARDINAL.telegram.bot.send_message(
            message.chat.id,
            "‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω</b>\n\n"
            f"üéÆ –õ–æ–≥–∏–Ω: {login}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n\n"
            "‚úÖ –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'available'\n"
            f"‚úÖ –ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <code>{new_password}</code>\n"
            "‚úÖ –¢–µ–∫—É—â–∏–µ —Å–µ—Å—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã",
            parse_mode="HTML"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é FunPay –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã
        try:
            message = format_message("rental_force_end", 
                login=login,
                username=username
            )
            
            if hasattr(CARDINAL, 'account') and hasattr(CARDINAL.account, 'send_message'):
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
                chat_id = f"users-{user_id}-{CARDINAL.account.id}"
                interlocutor_id = user_id
                chat_name = f"–ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å {username}"
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                CARDINAL.account.send_message(chat_id, message, chat_name, interlocutor_id, None, True, False, False)
                logger.info(f"{LOGGER_PREFIX} –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                logger.warning(f"{LOGGER_PREFIX} –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥—ã: {e}")

    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ force_return_account_cmd: {e}")
        try:
            CARDINAL.telegram.bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        except:
            pass

def manual_rent_account_cmd(message):
    """–†—É—á–Ω–∞—è –≤—ã–¥–∞—á–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –∞—Ä–µ–Ω–¥—É"""
    try:
        text = message.text.strip()
        
        # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ –Ω–∞—á–∞–ª–∞
        if text.startswith('/srent_manual'):
            text = text[len('/srent_manual'):].strip()
        
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ñ–æ—Ä–º–∞—Ç: username user_id [—Ç–∏–ø] [—á–∞—Å—ã]
        params = text.split()
        
        if len(params) < 2:
            CARDINAL.telegram.bot.send_message(
                message.chat.id, 
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/srent_manual USERNAME USER_ID [–¢–ò–ü] [–ß–ê–°–´]</code>\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/srent_manual test_user 12345 pubg 2</code>",
                parse_mode="HTML"
            )
            return
        
        username = params[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_id - —á–∏—Å–ª–æ
        try:
            user_id = int(params[1])
        except ValueError:
            CARDINAL.telegram.bot.send_message(
                message.chat.id,
                "‚ùå USER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.",
                parse_mode="HTML"
            )
            return
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ª—é–±–æ–π —Ç–∏–ø, 1 —á–∞—Å
        account_type = None
        duration_hours = 1
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
        if len(params) > 2:
            account_type = params[2]
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
        if len(params) > 3:
            try:
                duration_hours = int(params[3])
                if duration_hours <= 0:
                    raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
            except ValueError:
                CARDINAL.telegram.bot.send_message(
                    message.chat.id,
                    "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.",
                    parse_mode="HTML"
                )
                return
        
        # –í—ã–±–∏—Ä–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞
        account = rental_manager.get_account_by_type(account_type)
        
        if not account:
            CARDINAL.telegram.bot.send_message(
                message.chat.id,
                f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤{' —Ç–∏–ø–∞ ' + account_type if account_type else ''}.",
                parse_mode="HTML"
            )
            return
        
        # –ê—Ä–µ–Ω–¥—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
        success, message_text, account, rental = rental_manager.rent_account(
            user_id, username, duration_hours, account_type
        )
        
        if not success:
            CARDINAL.telegram.bot.send_message(
                message.chat.id,
                f"‚ùå {message_text}",
                parse_mode="HTML"
            )
            return
            
        end_time_str = datetime.fromtimestamp(rental.end_time).strftime("%d.%m.%Y %H:%M")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        CARDINAL.telegram.bot.send_message(
            message.chat.id,
            "‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{username}</b> (ID: {user_id})\n"
            f"üéÆ –ê–∫–∫–∞—É–Ω—Ç: <code>{account.login}</code>\n"
            f"üîë –ü–∞—Ä–æ–ª—å: <code>{account.password}</code>\n"
            f"üî∞ –¢–∏–ø: <code>{account.type}</code>\n"
            f"‚è± –°—Ä–æ–∫: <code>{duration_hours} —á.</code>\n"
            f"‚åõ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_time_str}",
            parse_mode="HTML"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é FunPay
        try:
            message_text = f"–ê—Ä–µ–Ω–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ Steam\n\n–õ–æ–≥–∏–Ω: {account.login}\n–ü–∞—Ä–æ–ª—å: {account.password}\n–¢–∏–ø: {account.type}\n\n–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã: {duration_hours} —á.\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_time_str}\n\n–í–∞–∂–Ω–æ:\n- –ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n- –ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω\n- –ù–µ –º–µ–Ω—è–π—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞\n- –ù–µ –≤–∫–ª—é—á–∞–π—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é"
            
            if hasattr(CARDINAL, 'account') and hasattr(CARDINAL.account, 'send_message'):
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
                chat_id = f"users-{user_id}-{CARDINAL.account.id}"
                interlocutor_id = user_id
                chat_name = f"–ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å {username}"
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                CARDINAL.account.send_message(chat_id, message_text, chat_name, interlocutor_id, None, True, False, False)
                logger.info(f"{LOGGER_PREFIX} –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–¥–∞—á–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                logger.warning(f"{LOGGER_PREFIX} –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–¥–∞—á–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ manual_rent_account_cmd: {e}")
        try:
            CARDINAL.telegram.bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        except:
            pass

def return_account_cmd(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        text = message.text.strip()
        
        # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ –Ω–∞—á–∞–ª–∞
        if text.startswith('/srent_return'):
            text = text[len('/srent_return'):].strip()
        
        if text:
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ª–æ–≥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞
            login = text
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
            if login not in rental_manager.accounts:
                CARDINAL.telegram.bot.send_message(
                    message.chat.id,
                    "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    parse_mode="HTML"
                )
                return
                
            account = rental_manager.accounts[login]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
            if account.status != "rented" or not account.rental_id:
                CARDINAL.telegram.bot.send_message(
                    message.chat.id,
                    "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω.",
                    parse_mode="HTML"
                )
                return
                
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
            success, message_text, new_password = rental_manager.return_account(account.rental_id)
            
            if not success:
                CARDINAL.telegram.bot.send_message(
                    message.chat.id,
                    f"‚ùå {message_text}",
                    parse_mode="HTML"
                )
                return
                
            CARDINAL.telegram.bot.send_message(
                message.chat.id,
                "‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω</b>\n\n"
                f"üéÆ –õ–æ–≥–∏–Ω: {login}\n\n"
                "‚úÖ –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'available'\n"
                f"‚úÖ –ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <code>{new_password}</code>\n"
                "‚úÖ –¢–µ–∫—É—â–∏–µ —Å–µ—Å—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã",
                parse_mode="HTML"
            )
        else:
            # –ï—Å–ª–∏ –ª–æ–≥–∏–Ω –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            rented_accounts = {login: account for login, account in rental_manager.accounts.items() if account.status == "rented"}
            
            if not rented_accounts:
                CARDINAL.telegram.bot.send_message(
                    message.chat.id,
                    "‚ÑπÔ∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
                    parse_mode="HTML"
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            accounts_text = "üîÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞</b>\n\n"
            for login, account in rented_accounts.items():
                rental = rental_manager.rentals.get(account.rental_id)
                if rental:
                    remaining_time = rental.get_remaining_time()
                    hours, remainder = divmod(remaining_time.seconds, 3600)
                    minutes, _ = divmod(remainder, 60)
                    accounts_text += f"üî¥ <b>{login}</b> ({account.type})\n"
                    accounts_text += f"   –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä: {rental.username}\n"
                    accounts_text += f"   –û—Å—Ç–∞–ª–æ—Å—å: {hours} —á. {minutes} –º–∏–Ω.\n"
                    accounts_text += f"   –í–æ–∑–≤—Ä–∞—Ç: <code>/srent_return {login}</code>\n\n"
                else:
                    accounts_text += f"üî¥ <b>{login}</b> ({account.type})\n"
                    accounts_text += f"   –í–æ–∑–≤—Ä–∞—Ç: <code>/srent_return {login}</code>\n\n"
            
            CARDINAL.telegram.bot.send_message(
                message.chat.id,
                accounts_text,
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ return_account_cmd: {e}")
        try:
            CARDINAL.telegram.bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        except:
            pass

def del_account_cmd(message):
    """–£–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç"""
    try:
        text = message.text.strip()
        
        # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ –Ω–∞—á–∞–ª–∞
        if text.startswith('/srent_del'):
            text = text[len('/srent_del'):].strip()
        
        if not text:
            CARDINAL.telegram.bot.send_message(
                message.chat.id, 
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/srent_del –õ–û–ì–ò–ù</code>\n\n"
                "–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π <code>/srent_list</code>",
                parse_mode="HTML"
            )
            return
        
        login = text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
        if login not in rental_manager.accounts:
            CARDINAL.telegram.bot.send_message(
                message.chat.id,
                "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                parse_mode="HTML"
            )
            return
            
        account = rental_manager.accounts[login]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
        if account.status == "rented":
            CARDINAL.telegram.bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç.",
                parse_mode="HTML"
            )
            return
            
        # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
        success, message_text = rental_manager.remove_account(login)
        
        if not success:
            CARDINAL.telegram.bot.send_message(
                message.chat.id,
                f"‚ùå {message_text}",
                parse_mode="HTML"
            )
            return
            
        CARDINAL.telegram.bot.send_message(
            message.chat.id,
            "‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b>\n\n"
            f"üéÆ –õ–æ–≥–∏–Ω: {login}\n"
            f"üî∞ –¢–∏–ø: {account.type}",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ del_account_cmd: {e}")
        try:
            CARDINAL.telegram.bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        except:
            pass

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–≤—è–∑–∫–∞–º–∏ –ª–æ—Ç–æ–≤
def unbind_lot_cmd(message):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–∏–≤—è–∑–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ –ª–æ—Ç—É"""
    try:
        text = message.text.strip()
        
        # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ –Ω–∞—á–∞–ª–∞
        if text.startswith('/srent_unbind'):
            text = text[len('/srent_unbind'):].strip()
        
        if not text:
            # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞
            CARDINAL.telegram.bot.send_message(
                message.chat.id, 
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/srent_unbind –ù–ê–ó–í–ê–ù–ò–ï_–õ–û–¢–ê</code>\n\n"
                "–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–∏–≤—è–∑–æ–∫ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π <code>/srent_bindings</code>",
                parse_mode="HTML"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–≤—è–∑–∫–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ª–æ—Ç–∞
        found_lot_name = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if text in lot_bindings:
            found_lot_name = text
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª—é–±–æ–µ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏
            for lot_name in lot_bindings:
                if lot_name.startswith(text):
                    found_lot_name = lot_name
                    break
                elif text.lower() in lot_name.lower():
                    found_lot_name = lot_name
                    break
        
        if not found_lot_name:
            CARDINAL.telegram.bot.send_message(
                message.chat.id,
                "‚ùå –ü—Ä–∏–≤—è–∑–∫–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ª–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                parse_mode="HTML"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        binding = lot_bindings[found_lot_name]
        account_type = binding.get("account_type", "–ù–µ —É–∫–∞–∑–∞–Ω")
        duration_hours = binding.get("duration_hours", 0)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É
        del lot_bindings[found_lot_name]
        save_lot_bindings()
        
        CARDINAL.telegram.bot.send_message(
            message.chat.id,
            "‚úÖ <b>–ü—Ä–∏–≤—è–∑–∫–∞ —É–¥–∞–ª–µ–Ω–∞!</b>\n\n"
            f"üîπ –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞: {found_lot_name}\n"
            f"üîπ –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞: {account_type}\n"
            f"üîπ –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã: {duration_hours} —á.",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ unbind_lot_cmd: {e}")
        try:
            CARDINAL.telegram.bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        except:
            pass

def list_bindings_cmd(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—è–∑–æ–∫ –ª–æ—Ç–æ–≤"""
    try:
        if not lot_bindings:
            CARDINAL.telegram.bot.send_message(
                message.chat.id,
                "üîó <b>–ü–†–ò–í–Ø–ó–ö–ò –õ–û–¢–û–í</b> üîó\n\n"
                f"{'='*30}\n\n"
                "üìå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–æ–∫ –ª–æ—Ç–æ–≤.\n\n"
                "<b>–ö–ê–ö –î–û–ë–ê–í–ò–¢–¨:</b>\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "<code>/srent_bind –ù–ê–ó–í–ê–ù–ò–ï_–õ–û–¢–ê | –¢–ò–ü | –ß–ê–°–´</code>\n\n"
                "<b>–ü–†–ò–ú–ï–†:</b>\n"
                "<code>/srent_bind –ê—Ä–µ–Ω–¥–∞ PUBG | PUBG | 2</code>\n\n"
                f"{'='*30}",
                parse_mode="HTML"
            )
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ —Ç–∏–ø—É –∞–∫–∫–∞—É–Ω—Ç–∞
        bindings_by_type = {}
        for lot_name, binding in lot_bindings.items():
            acc_type = binding.get("account_type", "unknown")
            if acc_type not in bindings_by_type:
                bindings_by_type[acc_type] = []
            bindings_by_type[acc_type].append((lot_name, binding))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–æ–∫
        bindings_text = "üîó <b>–ü–†–ò–í–Ø–ó–ö–ò –õ–û–¢–û–í</b> üîó\n\n"
        bindings_text += f"{'='*30}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        bindings_text += "<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
        bindings_text += f"üî∏ –í—Å–µ–≥–æ –ø—Ä–∏–≤—è–∑–æ–∫: <b>{len(lot_bindings)}</b>\n"
        bindings_text += f"üî∏ –¢–∏–ø–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: <b>{len(bindings_by_type)}</b>\n\n"
        bindings_text += f"{'='*30}\n\n"
        
        # –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ —Ç–∏–ø–∞–º
        bindings_text += "<b>üìã –°–ü–ò–°–û–ö –ü–†–ò–í–Ø–ó–û–ö</b>\n\n"
        
        for acc_type, bindings in bindings_by_type.items():
            bindings_text += f"<b>üìÅ –¢–ò–ü: {acc_type.upper()}</b>\n\n"
            
            # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –ø—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
            for i, (lot_name, binding) in enumerate(bindings, 1):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
                available_accounts = sum(1 for acc in rental_manager.accounts.values() 
                                      if acc.type == acc_type and acc.status == "available")
                
                # –≠–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                status_emoji = "üü¢" if available_accounts > 0 else "üî¥"
                
                bindings_text += f"{status_emoji} <b>{lot_name}</b>\n"
                bindings_text += f"  ‚è± –ê—Ä–µ–Ω–¥–∞: <b>{binding.get('duration_hours', 1)} —á.</b>\n"
                bindings_text += f"  üñ•Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ: <b>{available_accounts}</b> –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
                bindings_text += f"  ‚ùå <code>/srent_unbind {lot_name[:15]}</code>\n\n"
            
            bindings_text += f"{'-'*20}\n\n"
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
        if len(bindings_text) > 3900:
            bindings_text = bindings_text[:3900] + "...\n\n‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –ø–æ–∫–∞–∑–∞–Ω—ã –Ω–µ –≤—Å–µ –ø—Ä–∏–≤—è–∑–∫–∏"
        
        bindings_text += f"{'='*30}\n\n"
        bindings_text += "<b>–ö–û–ú–ê–ù–î–´:</b>\n"
        bindings_text += "‚Ä¢ <code>/srent_bind –ò–ú–Ø | –¢–ò–ü | –ß–ê–°–´</code> - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É\n"
        bindings_text += "‚Ä¢ <code>/srent_unbind –ò–ú–Ø</code> - —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É"
        
        CARDINAL.telegram.bot.send_message(
            message.chat.id,
            bindings_text,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ list_bindings_cmd: {e}")
        try:
            CARDINAL.telegram.bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        except:
            pass

def bind_lot_cmd(message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤—è–∑–∫—É –ª–æ—Ç–∞ –∫ —Ç–∏–ø—É –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        text = message.text.strip()
        
        # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ –Ω–∞—á–∞–ª–∞
        if text.startswith('/srent_bind'):
            text = text[len('/srent_bind'):].strip()
        
        if not text or '|' not in text:
            CARDINAL.telegram.bot.send_message(
                message.chat.id, 
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/srent_bind –ù–ê–ó–í–ê–ù–ò–ï_–õ–û–¢–ê | –¢–ò–ü | –ß–ê–°–´</code>\n\n"
                "–ü—Ä–∏–º–µ—Ä: <code>/srent_bind –ê—Ä–µ–Ω–¥–∞ PUBG –Ω–∞ 2 —á–∞—Å–∞ | PUBG | 2</code>\n\n"
                "‚Ä¢ –ù–ê–ó–í–ê–ù–ò–ï_–õ–û–¢–ê - —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞ –Ω–∞ FunPay\n"
                "‚Ä¢ –¢–ò–ü - —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: PUBG, CSGO, REPO)\n"
                "‚Ä¢ –ß–ê–°–´ - —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã –≤ —á–∞—Å–∞—Ö",
                parse_mode="HTML"
            )
            return
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é '|'
        parts = [part.strip() for part in text.split('|')]
        
        if len(parts) < 2:
            CARDINAL.telegram.bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>/srent_bind –ù–ê–ó–í–ê–ù–ò–ï_–õ–û–¢–ê | –¢–ò–ü | –ß–ê–°–´</code>",
                parse_mode="HTML"
            )
            return
            
        lot_name = parts[0]
        account_type = parts[1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω–æ –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
        duration_hours = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å
        if len(parts) > 2:
            try:
                duration_hours = int(parts[2])
                if duration_hours <= 0:
                    raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
            except ValueError:
                CARDINAL.telegram.bot.send_message(
                    message.chat.id,
                    "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.",
                    parse_mode="HTML"
                )
                return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤—è–∑–∫—É
        lot_bindings[lot_name] = {
            "account_type": account_type,
            "duration_hours": duration_hours
        }
        save_lot_bindings()
        
        CARDINAL.telegram.bot.send_message(
            message.chat.id,
            "‚úÖ <b>–ü—Ä–∏–≤—è–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üîπ –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞: {lot_name}\n"
            f"üîπ –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞: {account_type}\n"
            f"üîπ –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã: {duration_hours} —á.\n\n"
            "–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —ç—Ç–æ–≥–æ –ª–æ—Ç–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞–Ω –∞–∫–∫–∞—É–Ω—Ç.",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ bind_lot_cmd: {e}")
        try:
            CARDINAL.telegram.bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        except:
            pass

def help_lot_binding_cmd(message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –ø—Ä–∏–≤—è–∑–∫–∞–º –ª–æ—Ç–æ–≤"""
    try:
        CARDINAL.telegram.bot.send_message(
            message.chat.id,
            "üìö <b>–ü–û–ú–û–©–¨ –ü–û –ü–†–ò–í–Ø–ó–ö–ê–ú –õ–û–¢–û–í</b> üìö\n\n"
            f"{'='*30}\n\n"
            "<b>üîç –ö–ê–ö –†–ê–ë–û–¢–ê–Æ–¢ –ü–†–ò–í–Ø–ó–ö–ò:</b>\n\n"
            "–ü—Ä–∏–≤—è–∑–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ª–æ—Ç–∞ –Ω–∞ FunPay.\n\n"
            "–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ —Å–∏—Å—Ç–µ–º–∞ –∏—â–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø—Ä–∏–≤—è–∑–∫—É –ø–æ —Ç–æ—á–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é –ª–æ—Ç–∞, –∑–∞—Ç–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏ –≤—ã–¥–∞–µ—Ç –µ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ä–æ–∫.\n\n"
            f"{'='*30}\n\n"
            "<b>üìã –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:</b>\n\n"
            "‚Ä¢ <code>/srent_bind –ò–ú–Ø | –¢–ò–ü | –ß–ê–°–´</code>\n"
            "  üìå –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤—è–∑–∫—É\n\n"
            "‚Ä¢ <code>/srent_unbind –ò–ú–Ø</code>\n"
            "  üìå –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É\n\n"
            "‚Ä¢ <code>/srent_bindings</code>\n"
            "  üìå –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø—Ä–∏–≤—è–∑–∫–∏\n\n"
            f"{'='*30}\n\n"
            "<b>üìù –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:</b>\n\n"
            "‚Ä¢ <code>/srent_bind –ê–†–ï–ù–î–ê PUBG –ù–ê 3 –ß–ê–°–ê | PUBG | 3</code>\n\n"
            "‚Ä¢ <code>/srent_bind –ê–†–ï–ù–î–ê STEAM | REPO | 12</code>\n\n"
            f"{'='*30}\n\n"
            "<b>‚ö†Ô∏è –í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:</b>\n\n"
            "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞ –¥–æ–ª–∂–Ω–æ <b>—Ç–æ—á–Ω–æ</b> —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–∞ FunPay\n\n"
            "‚Ä¢ –¢–∏–ø –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞–∫–∫–∞—É–Ω—Ç–∞–º\n\n"
            "‚Ä¢ –ß–∞—Å—ã –∞—Ä–µ–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ help_lot_binding_cmd: {e}")
        try:
            CARDINAL.telegram.bot.send_message(message.chat.id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        except:
            pass

def help_lot_binding_callback(call=None, *args, **kwargs):
    if args and isinstance(args[0], telebot.types.CallbackQuery):
        call = args[0]
    if not isinstance(call, telebot.types.CallbackQuery):
        return
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –ø—Ä–∏–≤—è–∑–∫–∞–º –ª–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ callback"""
    try:
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–≤—è–∑–∫–∞–º", callback_data="srent_lot_bindings"))
        markup.row(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="srent_menu"))
        
        CARDINAL.telegram.bot.edit_message_text(
            "üìö <b>–ü–û–ú–û–©–¨ –ü–û –ü–†–ò–í–Ø–ó–ö–ê–ú –õ–û–¢–û–í</b> üìö\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "<b>üîç –ö–ê–ö –†–ê–ë–û–¢–ê–Æ–¢ –ü–†–ò–í–Ø–ó–ö–ò:</b>\n\n"
            "–ü—Ä–∏–≤—è–∑–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ª–æ—Ç–∞ –Ω–∞ FunPay.\n\n"
            "–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ —Å–∏—Å—Ç–µ–º–∞ –∏—â–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø—Ä–∏–≤—è–∑–∫—É –ø–æ —Ç–æ—á–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é –ª–æ—Ç–∞, –∑–∞—Ç–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏ –≤—ã–¥–∞–µ—Ç –µ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ä–æ–∫.\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "<b>üìã –°–û–ó–î–ê–ù–ò–ï –ü–†–ò–í–Ø–ó–ö–ò:</b>\n\n"
            "1. –í –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É –ª–æ—Ç–∞'\n"
            "2. –í–≤–µ–¥–∏—Ç–µ <b>—Ç–æ—á–Ω–æ–µ</b> –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞ —Å FunPay\n"
            "3. –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å—Å—è\n"
            "4. –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã –≤ —á–∞—Å–∞—Ö\n\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "<b>‚ö†Ô∏è –í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:</b>\n\n"
            "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞ –¥–æ–ª–∂–Ω–æ <b>—Ç–æ—á–Ω–æ</b> —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–∞ FunPay\n\n"
            "‚Ä¢ –¢–∏–ø –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞–∫–∫–∞—É–Ω—Ç–∞–º\n\n"
            "‚Ä¢ –ß–∞—Å—ã –∞—Ä–µ–Ω–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode="HTML"
        )
        CARDINAL.telegram.bot.answer_callback_query(call.id, "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø—Ä–∏–≤—è–∑–∫–∞–º")
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –ø—Ä–∏–≤—è–∑–∫–∞–º: {e}")
        try:
            CARDINAL.telegram.bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)[:50]}")
        except:
            pass

def manage_binding_callback(call=None, binding_hash=None, *args, **kwargs):
    if args and isinstance(args[0], telebot.types.CallbackQuery):
        call = args[0]
    if not isinstance(call, telebot.types.CallbackQuery):
        return
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ –ª–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ö–µ—à –≤ –Ω–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ
        if binding_hash not in binding_hash_map:
            CARDINAL.telegram.bot.answer_callback_query(call.id, "–ü—Ä–∏–≤—è–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞ –ø–æ —Ö–µ—à—É
        lot_name = binding_hash_map[binding_hash]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–∏–≤—è–∑–∫–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ª–æ—Ç–∞
        if lot_name not in lot_bindings:
            CARDINAL.telegram.bot.answer_callback_query(call.id, "–ü—Ä–∏–≤—è–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏
        binding = lot_bindings[lot_name]
        account_type = binding["account_type"]
        duration_hours = binding["duration_hours"]
        
        # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_name = lot_name
        if len(display_name) > 40:
            display_name = display_name[:37] + "..."
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∏–≤—è–∑–∫–µ
        binding_text = "üîó <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ò–í–Ø–ó–ö–û–ô</b>\n\n"
        binding_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        binding_text += f"<b>üìù –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞:</b>\n{display_name}\n\n"
        binding_text += f"<b>üîπ –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞:</b> {account_type}\n"
        binding_text += f"<b>üîπ –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:</b> {duration_hours} —á.\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        markup = InlineKeyboardMarkup(row_width=2)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏–≤—è–∑–∫–∏
        markup.row(
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø üí°", callback_data=f"srent_edit_binding_type_{binding_hash}"),
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è ‚è∞", callback_data=f"srent_edit_binding_time_{binding_hash}")
        )
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏
        markup.row(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É üìï", callback_data=f"srent_delete_binding_{binding_hash}"))
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        markup.row(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–∏–≤—è–∑–∫–∞–º", callback_data="srent_lot_bindings"))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        CARDINAL.telegram.bot.edit_message_text(
            binding_text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode="HTML"
        )
        
        CARDINAL.telegram.bot.answer_callback_query(call.id, "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–æ–π")
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–æ–π: {e}")
        try:
            CARDINAL.telegram.bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)[:50]}")
        except:
            pass

def start_add_binding_callback(call=None, *args, **kwargs):
    if args and isinstance(args[0], telebot.types.CallbackQuery):
        call = args[0]
    if not isinstance(call, telebot.types.CallbackQuery):
        return
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø—Ä–∏–≤—è–∑–∫–∏ –ª–æ—Ç–∞"""
    try:
        chat_id = call.message.chat.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        ADD_BINDING_STATES[chat_id] = {"state": "name", "data": {}}
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="srent_cancel_binding"))
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        CARDINAL.telegram.bot.edit_message_text(
            "üîó <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ –ª–æ—Ç–∞</b>\n\n"
            "–®–∞–≥ 1: –£–∫–∞–∂–∏—Ç–µ <b>—Ç–æ—á–Ω–æ–µ</b> –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞ —Å FunPay.\n\n"
            "‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ <b>–ø–æ–ª–Ω–æ—Å—Ç—å—é</b> —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–∞ FunPay!",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode="HTML"
        )
        
        CARDINAL.telegram.bot.answer_callback_query(call.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞")
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏: {e}")
        try:
            CARDINAL.telegram.bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)[:50]}")
        except:
            pass

def handle_binding_add_steps(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —à–∞–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ –ª–æ—Ç–∞"""
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏
    if chat_id not in ADD_BINDING_STATES:
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ
    state = ADD_BINDING_STATES[chat_id]["state"]
    data = ADD_BINDING_STATES[chat_id]["data"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ–Ω—É
    if message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "cancel", "/cancel", "/–æ—Ç–º–µ–Ω–∞"]:
        del ADD_BINDING_STATES[chat_id]
        CARDINAL.telegram.bot.send_message(
            chat_id,
            "‚ùå –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω.",
            parse_mode="HTML"
        )
        return True
    
    try:
        if state == "name":
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞
            lot_name = message.text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–∏–≤—è–∑–∫–∏
            if lot_name in lot_bindings:
                markup = InlineKeyboardMarkup()
                markup.row(InlineKeyboardButton("‚¨ÖÔ∏è –ö –ø—Ä–∏–≤—è–∑–∫–∞–º", callback_data="srent_lot_bindings"))
                
                CARDINAL.telegram.bot.send_message(
                    chat_id,
                    "‚ö†Ô∏è <b>–ü—Ä–∏–≤—è–∑–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø—Ä–∏–≤—è–∑–∫—É –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π.",
                    reply_markup=markup,
                    parse_mode="HTML"
                )
                del ADD_BINDING_STATES[chat_id]
                return True
            
            data["name"] = lot_name
            ADD_BINDING_STATES[chat_id]["state"] = "type"
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
            available_types = set()
            for acc in rental_manager.accounts.values():
                available_types.add(acc.type)
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
            type_message = "‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n"
            type_message += "–®–∞–≥ 2: –£–∫–∞–∂–∏—Ç–µ <b>—Ç–∏–ø</b> –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –≤—ã–¥–∞—á–∏.\n\n"
            
            if available_types:
                type_message += "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b>\n"
                for acc_type in available_types:
                    type_message += f"‚Ä¢ <code>{acc_type}</code>\n"
            else:
                type_message += "‚ö†Ô∏è <b>–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.</b>\n"
                type_message += "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏, –Ω–æ –¥–ª—è –µ–µ —Ä–∞–±–æ—Ç—ã –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞."
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
            markup = InlineKeyboardMarkup()
            markup.row(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="srent_cancel_binding"))
            
            CARDINAL.telegram.bot.send_message(
                chat_id,
                type_message,
                reply_markup=markup,
                parse_mode="HTML"
            )
        
        elif state == "type":
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            account_type = message.text.strip()
            data["type"] = account_type
            ADD_BINDING_STATES[chat_id]["state"] = "duration"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏
            markup = InlineKeyboardMarkup(row_width=3)
            markup.row(
                InlineKeyboardButton("1 —á–∞—Å", callback_data="srent_binding_duration_1"),
                InlineKeyboardButton("2 —á–∞—Å–∞", callback_data="srent_binding_duration_2"),
                InlineKeyboardButton("3 —á–∞—Å–∞", callback_data="srent_binding_duration_3")
            )
            markup.row(
                InlineKeyboardButton("6 —á–∞—Å–æ–≤", callback_data="srent_binding_duration_6"),
                InlineKeyboardButton("12 —á–∞—Å–æ–≤", callback_data="srent_binding_duration_12"),
                InlineKeyboardButton("24 —á–∞—Å–∞", callback_data="srent_binding_duration_24")
            )
            markup.row(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="srent_cancel_binding"))
            
            CARDINAL.telegram.bot.send_message(
                chat_id,
                "‚úÖ –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n"
                "–®–∞–≥ 3: –£–∫–∞–∂–∏—Ç–µ <b>—Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã</b> –≤ —á–∞—Å–∞—Ö.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
                reply_markup=markup,
                parse_mode="HTML"
            )
        
        elif state == "duration":
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã
            try:
                duration_hours = int(message.text.strip())
                if duration_hours <= 0:
                    raise ValueError("–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            except ValueError:
                CARDINAL.telegram.bot.send_message(
                    chat_id,
                    "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥</b>\n\n"
                    "–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –≤ –≤–∏–¥–µ —Ü–µ–ª–æ–≥–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ —á–∞—Å–æ–≤.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∑–∞–Ω–æ–≤–æ.",
                    parse_mode="HTML"
                )
                return True
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É
            lot_name = data["name"]
            account_type = data["type"]
            
            lot_bindings[lot_name] = {
                "account_type": account_type,
                "duration_hours": duration_hours
            }
            save_lot_bindings()
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            del ADD_BINDING_STATES[chat_id]
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ø–∏—Å–∫—É –ø—Ä–∏–≤—è–∑–æ–∫
            markup = InlineKeyboardMarkup()
            markup.row(InlineKeyboardButton("‚¨ÖÔ∏è –ö –ø—Ä–∏–≤—è–∑–∫–∞–º", callback_data="srent_lot_bindings"))
            
            CARDINAL.telegram.bot.send_message(
                chat_id,
                f"‚úÖ <b>–ü—Ä–∏–≤—è–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                f"<b>üîπ –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞:</b> {lot_name}\n"
                f"<b>üîπ –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞:</b> {account_type}\n"
                f"<b>üîπ –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:</b> {duration_hours} —á.\n\n"
                f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —ç—Ç–æ–≥–æ –ª–æ—Ç–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞–Ω –∞–∫–∫–∞—É–Ω—Ç —Ç–∏–ø–∞ {account_type} –Ω–∞ {duration_hours} —á.",
                reply_markup=markup,
                parse_mode="HTML"
            )
        
        elif state == "edit_type":
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            new_type = message.text.strip()
            lot_name = data["name"]
            binding_hash = data["hash"]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
            lot_bindings[lot_name]["account_type"] = new_type
            save_lot_bindings()
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            del ADD_BINDING_STATES[chat_id]
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–∏–≤—è–∑–∫–æ–π
            markup = InlineKeyboardMarkup()
            markup.row(InlineKeyboardButton("‚¨ÖÔ∏è –ö –ø—Ä–∏–≤—è–∑–∫–µ", callback_data=f"srent_binding_{binding_hash}"))
            markup.row(InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –ø—Ä–∏–≤—è–∑–æ–∫", callback_data="srent_lot_bindings"))
            
            CARDINAL.telegram.bot.send_message(
                chat_id,
                f"‚úÖ <b>–¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
                f"<b>üîπ –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞:</b> {lot_name}\n"
                f"<b>üîπ –ù–æ–≤—ã–π —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞:</b> {new_type}",
                reply_markup=markup,
                parse_mode="HTML"
            )
            
        elif state == "edit_duration":
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã
            try:
                new_duration = int(message.text.strip())
                if new_duration <= 0:
                    raise ValueError("–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            except ValueError:
                CARDINAL.telegram.bot.send_message(
                    chat_id,
                    "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥</b>\n\n"
                    "–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –≤ –≤–∏–¥–µ —Ü–µ–ª–æ–≥–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ —á–∞—Å–æ–≤.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∑–∞–Ω–æ–≤–æ.",
                    parse_mode="HTML"
                )
                return True
            
            lot_name = data["name"]
            binding_hash = data["hash"]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã
            lot_bindings[lot_name]["duration_hours"] = new_duration
            save_lot_bindings()
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            del ADD_BINDING_STATES[chat_id]
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–∏–≤—è–∑–∫–æ–π
            markup = InlineKeyboardMarkup()
            markup.row(InlineKeyboardButton("‚¨ÖÔ∏è –ö –ø—Ä–∏–≤—è–∑–∫–µ", callback_data=f"srent_binding_{binding_hash}"))
            markup.row(InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –ø—Ä–∏–≤—è–∑–æ–∫", callback_data="srent_lot_bindings"))
            
            CARDINAL.telegram.bot.send_message(
                chat_id,
                f"‚úÖ <b>–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
                f"<b>üîπ –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞:</b> {lot_name}\n"
                f"<b>üîπ –ù–æ–≤—ã–π —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:</b> {new_duration} —á.",
                reply_markup=markup,
                parse_mode="HTML"
            )
        
        return True
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_binding_add_steps: {e}")
        try:
            CARDINAL.telegram.bot.send_message(chat_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        except:
            pass
        
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if chat_id in ADD_BINDING_STATES:
            del ADD_BINDING_STATES[chat_id]
        
        return True

def cancel_binding_callback(call=None, *args, **kwargs):
    if args and isinstance(args[0], telebot.types.CallbackQuery):
        call = args[0]
    if not isinstance(call, telebot.types.CallbackQuery):
        return
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏"""
    try:
        chat_id = call.message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏
        if chat_id in ADD_BINDING_STATES:
            del ADD_BINDING_STATES[chat_id]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –ø—Ä–∏–≤—è–∑–æ–∫
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("‚¨ÖÔ∏è –ö –ø—Ä–∏–≤—è–∑–∫–∞–º", callback_data="srent_lot_bindings"))
        
        CARDINAL.telegram.bot.edit_message_text(
            "‚ùå <b>–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω.</b>",
            chat_id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode="HTML"
        )
        CARDINAL.telegram.bot.answer_callback_query(call.id, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ cancel_binding_callback: {e}")
        try:
            CARDINAL.telegram.bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)[:50]}")
        except:
            pass

def binding_duration_callback(call=None, *args, **kwargs):
    if args and isinstance(args[0], telebot.types.CallbackQuery):
        call = args[0]
    if not isinstance(call, telebot.types.CallbackQuery):
        return
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—Ä–µ–Ω–¥—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤—è–∑–∫–∏"""
    try:
        chat_id = call.message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏
        if chat_id not in ADD_BINDING_STATES:
            CARDINAL.telegram.bot.answer_callback_query(call.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–≤—è–∑–∫–æ–π")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ callback data
        duration_str = call.data.replace("srent_binding_duration_", "")
        try:
            duration_hours = int(duration_str)
        except ValueError:
            CARDINAL.telegram.bot.answer_callback_query(call.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        data = ADD_BINDING_STATES[chat_id]["data"]
        state = ADD_BINDING_STATES[chat_id]["state"]
        
        if state == "duration":
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—è–∑–∫–∏
            lot_name = data["name"]
            account_type = data["type"]
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤—è–∑–∫—É
            lot_bindings[lot_name] = {
                "account_type": account_type,
                "duration_hours": duration_hours
            }
            save_lot_bindings()
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            del ADD_BINDING_STATES[chat_id]
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ø–∏—Å–∫—É –ø—Ä–∏–≤—è–∑–æ–∫
            markup = InlineKeyboardMarkup()
            markup.row(InlineKeyboardButton("‚¨ÖÔ∏è –ö –ø—Ä–∏–≤—è–∑–∫–∞–º", callback_data="srent_lot_bindings"))
            
            CARDINAL.telegram.bot.edit_message_text(
                f"‚úÖ <b>–ü—Ä–∏–≤—è–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                f"<b>üîπ –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞:</b> {lot_name}\n"
                f"<b>üîπ –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞:</b> {account_type}\n"
                f"<b>üîπ –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:</b> {duration_hours} —á.\n\n"
                f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —ç—Ç–æ–≥–æ –ª–æ—Ç–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞–Ω –∞–∫–∫–∞—É–Ω—Ç —Ç–∏–ø–∞ {account_type} –Ω–∞ {duration_hours} —á.",
                chat_id,
                call.message.message_id,
                reply_markup=markup,
                parse_mode="HTML"
            )
            
        elif state == "edit_duration":
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø—Ä–∏–≤—è–∑–∫–∏
            lot_name = data["name"]
            binding_hash = data["hash"]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã
            lot_bindings[lot_name]["duration_hours"] = duration_hours
            save_lot_bindings()
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            del ADD_BINDING_STATES[chat_id]
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–∏–≤—è–∑–∫–æ–π
            markup = InlineKeyboardMarkup()
            markup.row(InlineKeyboardButton("‚¨ÖÔ∏è –ö –ø—Ä–∏–≤—è–∑–∫–µ", callback_data=f"srent_binding_{binding_hash}"))
            markup.row(InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –ø—Ä–∏–≤—è–∑–æ–∫", callback_data="srent_lot_bindings"))
            
            CARDINAL.telegram.bot.edit_message_text(
                f"‚úÖ <b>–°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
                f"<b>üîπ –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞:</b> {lot_name}\n"
                f"<b>üîπ –ù–æ–≤—ã–π —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:</b> {duration_hours} —á.",
                chat_id,
                call.message.message_id,
                reply_markup=markup,
                parse_mode="HTML"
            )
        
        CARDINAL.telegram.bot.answer_callback_query(call.id, "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ binding_duration_callback: {e}")
        try:
            CARDINAL.telegram.bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)[:50]}")
        except:
            pass

def show_all_bindings_callback(call=None, *args, **kwargs):
    if args and isinstance(args[0], telebot.types.CallbackQuery):
        call = args[0]
    if not isinstance(call, telebot.types.CallbackQuery):
        return
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–≤—è–∑–æ–∫"""
    try:
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, –ø–æ–∑–∂–µ —Ä–µ–∞–ª–∏–∑—É–µ–º –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
        CARDINAL.telegram.bot.answer_callback_query(call.id, "–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø—Ä–∏–≤—è–∑–æ–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Å–ø–∏—Å–∫—É –ø—Ä–∏–≤—è–∑–æ–∫
        show_lot_bindings_callback(call)
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–∏–≤—è–∑–æ–∫: {e}")
        try:
            CARDINAL.telegram.bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)[:50]}")
        except:
            pass

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∞–º–∏ –ª–æ—Ç–æ–≤
def edit_binding_type_callback(call=None, binding_hash=None, *args, **kwargs):
    if args and isinstance(args[0], telebot.types.CallbackQuery):
        call = args[0]
    if not isinstance(call, telebot.types.CallbackQuery):
        return
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –ª–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ö–µ—à –≤ –Ω–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ
        if binding_hash not in binding_hash_map:
            CARDINAL.telegram.bot.answer_callback_query(call.id, "–ü—Ä–∏–≤—è–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞ –ø–æ —Ö–µ—à—É
        lot_name = binding_hash_map[binding_hash]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–∏–≤—è–∑–∫–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ª–æ—Ç–∞
        if lot_name not in lot_bindings:
            CARDINAL.telegram.bot.answer_callback_query(call.id, "–ü—Ä–∏–≤—è–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø –∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏
        binding = lot_bindings[lot_name]
        current_type = binding["account_type"]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞
        chat_id = call.message.chat.id
        ADD_BINDING_STATES[chat_id] = {
            "state": "edit_type",
            "data": {
                "name": lot_name,
                "current_type": current_type,
                "hash": binding_hash
            }
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        available_types = set()
        for acc in rental_manager.accounts.values():
            available_types.add(acc.type)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
        type_message = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–∏–≤—è–∑–∫–∏</b>\n\n"
        type_message += f"–õ–æ—Ç: <b>{lot_name}</b>\n"
        type_message += f"–¢–µ–∫—É—â–∏–π —Ç–∏–ø: <b>{current_type}</b>\n\n"
        type_message += "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–≤—ã–π —Ç–∏–ø</b> –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –≤—ã–¥–∞—á–∏.\n\n"
        
        if available_types:
            type_message += "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b>\n"
            for acc_type in available_types:
                type_message += f"‚Ä¢ <code>{acc_type}</code>\n"
        else:
            type_message += "‚ö†Ô∏è <b>–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.</b>\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"srent_binding_{binding_hash}"))
        
        CARDINAL.telegram.bot.edit_message_text(
            type_message,
            chat_id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode="HTML"
        )
        
        CARDINAL.telegram.bot.answer_callback_query(call.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞")
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–∏–≤—è–∑–∫–∏: {e}")
        try:
            CARDINAL.telegram.bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)[:50]}")
        except:
            pass

def edit_binding_time_callback(call=None, binding_hash=None, *args, **kwargs):
    if args and isinstance(args[0], telebot.types.CallbackQuery):
        call = args[0]
    if not isinstance(call, telebot.types.CallbackQuery):
        return
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã –ø—Ä–∏–≤—è–∑–∫–∏ –ª–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ö–µ—à –≤ –Ω–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ
        if binding_hash not in binding_hash_map:
            CARDINAL.telegram.bot.answer_callback_query(call.id, "–ü—Ä–∏–≤—è–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞ –ø–æ —Ö–µ—à—É
        lot_name = binding_hash_map[binding_hash]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–∏–≤—è–∑–∫–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ª–æ—Ç–∞
        if lot_name not in lot_bindings:
            CARDINAL.telegram.bot.answer_callback_query(call.id, "–ü—Ä–∏–≤—è–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã
        binding = lot_bindings[lot_name]
        current_duration = binding["duration_hours"]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        chat_id = call.message.chat.id
        ADD_BINDING_STATES[chat_id] = {
            "state": "edit_duration",
            "data": {
                "name": lot_name,
                "current_duration": current_duration,
                "hash": binding_hash
            }
        }
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏
        markup = InlineKeyboardMarkup(row_width=3)
        markup.row(
            InlineKeyboardButton("1 —á–∞—Å", callback_data="srent_binding_duration_1"),
            InlineKeyboardButton("2 —á–∞—Å–∞", callback_data="srent_binding_duration_2"),
            InlineKeyboardButton("3 —á–∞—Å–∞", callback_data="srent_binding_duration_3")
        )
        markup.row(
            InlineKeyboardButton("6 —á–∞—Å–æ–≤", callback_data="srent_binding_duration_6"),
            InlineKeyboardButton("12 —á–∞—Å–æ–≤", callback_data="srent_binding_duration_12"),
            InlineKeyboardButton("24 —á–∞—Å–∞", callback_data="srent_binding_duration_24")
        )
        markup.row(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"srent_binding_{binding_hash}"))
        
        CARDINAL.telegram.bot.edit_message_text(
            f"‚è± <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∞—Ä–µ–Ω–¥—ã</b>\n\n"
            f"–õ–æ—Ç: <b>{lot_name}</b>\n"
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: <b>{current_duration} —á.</b>\n\n"
            "–£–∫–∞–∂–∏—Ç–µ <b>–Ω–æ–≤—ã–π —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã</b> –≤ —á–∞—Å–∞—Ö.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.",
            chat_id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode="HTML"
        )
        
        CARDINAL.telegram.bot.answer_callback_query(call.id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã")
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≤—è–∑–∫–∏: {e}")
        try:
            CARDINAL.telegram.bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)[:50]}")
        except:
            pass

def delete_binding_callback(call=None, binding_hash=None, *args, **kwargs):
    if args and isinstance(args[0], telebot.types.CallbackQuery):
        call = args[0]
    if not isinstance(call, telebot.types.CallbackQuery):
        return
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–∏–≤—è–∑–∫—É –ª–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ö–µ—à –≤ –Ω–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ
        if binding_hash not in binding_hash_map:
            CARDINAL.telegram.bot.answer_callback_query(call.id, "–ü—Ä–∏–≤—è–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞ –ø–æ —Ö–µ—à—É
        lot_name = binding_hash_map[binding_hash]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–∏–≤—è–∑–∫–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ª–æ—Ç–∞
        if lot_name not in lot_bindings:
            CARDINAL.telegram.bot.answer_callback_query(call.id, "–ü—Ä–∏–≤—è–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        binding = lot_bindings[lot_name]
        account_type = binding.get("account_type", "–ù–µ —É–∫–∞–∑–∞–Ω")
        duration_hours = binding.get("duration_hours", 0)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É
        del lot_bindings[lot_name]
        save_lot_bindings()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ö–µ—à-–∫–∞—Ä—Ç—É
        binding_hash_map.pop(binding_hash, None)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –ø—Ä–∏–≤—è–∑–æ–∫
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("‚¨ÖÔ∏è –ö –ø—Ä–∏–≤—è–∑–∫–∞–º", callback_data="srent_lot_bindings"))
        
        CARDINAL.telegram.bot.edit_message_text(
            "‚úÖ <b>–ü—Ä–∏–≤—è–∑–∫–∞ —É–¥–∞–ª–µ–Ω–∞!</b>\n\n"
            f"<b>üîπ –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞:</b> {lot_name}\n"
            f"<b>üîπ –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞:</b> {account_type}\n"
            f"<b>üîπ –°—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã:</b> {duration_hours} —á.",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup,
            parse_mode="HTML"
        )
        
        CARDINAL.telegram.bot.answer_callback_query(call.id, "–ü—Ä–∏–≤—è–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏: {e}")
        try:
            CARDINAL.telegram.bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)[:50]}")
        except:
            pass

# ‚úÖ FIXED TelegramHandler –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ–±—ã—á–Ω—ã–º–∏ Telegram –±–æ—Ç–∞–º–∏
class TelegramHandler:
    def __init__(self):
        self.bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")
        self.handlers = []

    def msg_handler(self, *args, **kwargs):
        if args:
            func = args[0]
            return self.bot.message_handler(**kwargs)(func)
        else:
            def wrapper(f):
                return self.bot.message_handler(**kwargs)(f)
            return wrapper
