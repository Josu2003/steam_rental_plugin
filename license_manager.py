import requests
import json
import os
from datetime import datetime

# –°–°–´–õ–ö–ê –Ω–∞ keys.json (raw URL –∏–∑ GitHub)
KEYS_URL = "https://raw.githubusercontent.com/Josu2003/steam_rental_plugin/refs/heads/main/Users_Keys.json"

DATA_DIR = os.path.dirname(os.path.abspath(__file__))

def fetch_keys():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –∫–ª—é—á–µ–π —Å GitHub"""
    try:
        response = requests.get(KEYS_URL, timeout=10)
        if response.status_code == 200:
            return response.json()
        else:
            return {}
    except Exception:
        return {}

def save_user_key(user_id, key):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ –∫–ª—é—á"""
    license_file = os.path.join(DATA_DIR, "license.json")
    data = {"user_id": user_id, "key": key}
    with open(license_file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_user_key():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á"""
    license_file = os.path.join(DATA_DIR, "license.json")
    if not os.path.exists(license_file):
        return None
    with open(license_file, "r", encoding="utf-8") as f:
        return json.load(f)

def is_license_valid(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–ª—é—á–∞"""
    license_data = load_user_key()
    if not license_data:
        return False, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞. –ò—Å–ø–æ–ª—å–∑—É–π /activate –ö–õ–Æ–ß"

    key = license_data.get("key")
    keys = fetch_keys()

    if key not in keys:
        return False, "‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω"

    key_data = keys[key]
    expires_at = datetime.fromisoformat(key_data["expires_at"])
    if datetime.now() > expires_at:
        return False, "‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –∏—Å—Ç—ë–∫"

    if key_data["user_id"] and key_data["user_id"] != user_id:
        return False, "üîí –ö–ª—é—á –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"

    return True, "‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–Ω–∞"

def activate_key(message, CARDINAL):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ /activate"""
    parts = message.text.strip().split(" ")
    if len(parts) < 2:
        CARDINAL.telegram.bot.send_message(message.chat.id, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /activate –ö–õ–Æ–ß")
        return

    key = parts[1].strip()
    keys = fetch_keys()

    if key not in keys:
        CARDINAL.telegram.bot.send_message(message.chat.id, "‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    key_data = keys[key]
    expires_at = datetime.fromisoformat(key_data["expires_at"])
    if datetime.now() > expires_at:
        CARDINAL.telegram.bot.send_message(message.chat.id, "‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –∏—Å—Ç—ë–∫")
        return

    if key_data["user_id"] and key_data["user_id"] != message.chat.id:
        CARDINAL.telegram.bot.send_message(message.chat.id, "üîí –ö–ª—é—á —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    save_user_key(message.chat.id, key)
    CARDINAL.telegram.bot.send_message(message.chat.id, "‚úÖ –ö–ª—é—á –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /srent_menu")
